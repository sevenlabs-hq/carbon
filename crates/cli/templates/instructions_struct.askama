{%- if instruction.requires_imports %}
use super::super::types::*;
{%- endif %}
{% raw %}
use carbon_core::{CarbonDeserialize, borsh, account_utils::next_account};
{% endraw %}

#[derive(CarbonDeserialize, Debug, serde::Serialize, serde::Deserialize, PartialEq, Eq, Clone, Hash)]
#[carbon(discriminator = "{{ instruction.discriminator }}")]
pub struct {{ instruction.struct_name }}{
    {%- for arg in instruction.args %}
    pub {{ arg.name }}: {{ arg.rust_type }},
    {%- endfor %}
}

#[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
pub struct {{ instruction.struct_name }}InstructionAccounts {
    {%- for account in instruction.accounts %}
    pub {{ account.name }}: {% if account.is_optional %}Option<solana_pubkey::Pubkey>{% else %}solana_pubkey::Pubkey{% endif %},
    {%- endfor %}
}

impl carbon_core::deserialize::ArrangeAccounts for {{ instruction.struct_name }} {
    type ArrangedAccounts = {{ instruction.struct_name }}InstructionAccounts;

    fn arrange_accounts(accounts: &[solana_instruction::AccountMeta]) -> Option<Self::ArrangedAccounts> {
        let mut iter = accounts.iter();

        {%- for account in instruction.accounts %}
        {%- if account.is_optional %}
        let {{ account.name }} = next_account(&mut iter);
        {%- else %}
        let {{ account.name }} = next_account(&mut iter)?;
        {%- endif %}
        {%- endfor %}

        Some({{ instruction.struct_name }}InstructionAccounts {
            {%- for account in instruction.accounts %}
            {{ account.name }},
            {%- endfor %}
        })
    }
}
