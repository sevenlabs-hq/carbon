//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;
use crate::types::BinLiquidityDistributionByWeight;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct AddLiquidityOneSide {
    /// Amount of X token or Y token to deposit
    pub amount: u64,
    /// Active bin that integrator observe off-chain
    pub active_id: i32,
    /// max active bin slippage allowed
    pub max_active_bin_slippage: i32,
    /// Liquidity distribution to each bins
    pub bin_liquidity_dist: Vec<BinLiquidityDistributionByWeight>,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddLiquidityOneSideInstructionAccounts {
    pub position: solana_pubkey::Pubkey,
    pub lb_pair: solana_pubkey::Pubkey,
    pub bin_array_bitmap_extension: Option<solana_pubkey::Pubkey>,
    pub user_token: solana_pubkey::Pubkey,
    pub reserve: solana_pubkey::Pubkey,
    pub token_mint: solana_pubkey::Pubkey,
    pub bin_array_lower: solana_pubkey::Pubkey,
    pub bin_array_upper: solana_pubkey::Pubkey,
    pub sender: solana_pubkey::Pubkey,
    pub token_program: solana_pubkey::Pubkey,
    pub event_authority: solana_pubkey::Pubkey,
    pub program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl AddLiquidityOneSide {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[94, 155, 103, 151, 70, 95, 220, 165] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for AddLiquidityOneSide {
    type ArrangedAccounts = AddLiquidityOneSideInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let position = next_account(&mut iter)?;
                let lb_pair = next_account(&mut iter)?;
                let bin_array_bitmap_extension = next_account(&mut iter);
                let user_token = next_account(&mut iter)?;
                let reserve = next_account(&mut iter)?;
                let token_mint = next_account(&mut iter)?;
                let bin_array_lower = next_account(&mut iter)?;
                let bin_array_upper = next_account(&mut iter)?;
                let sender = next_account(&mut iter)?;
                let token_program = next_account(&mut iter)?;
                let event_authority = next_account(&mut iter)?;
                let program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(AddLiquidityOneSideInstructionAccounts {
                        position: position,
                        lb_pair: lb_pair,
                        bin_array_bitmap_extension: bin_array_bitmap_extension,
                        user_token: user_token,
                        reserve: reserve,
                        token_mint: token_mint,
                        bin_array_lower: bin_array_lower,
                        bin_array_upper: bin_array_upper,
                        sender: sender,
                        token_program: token_program,
                        event_authority: event_authority,
                        program: program,
                        remaining: remaining.to_vec(),
        })
            }
}

