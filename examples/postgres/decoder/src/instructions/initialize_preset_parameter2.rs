//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct InitializePresetParameter2 {
        pub index: u16,
    /// Bin step. Represent the price increment / decrement.
    pub bin_step: u16,
    /// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
    pub base_factor: u16,
    /// Filter period determine high frequency trading time window.
    pub filter_period: u16,
    /// Decay period determine when the volatile fee start decay / decrease.
    pub decay_period: u16,
    /// Reduction factor controls the volatile fee rate decrement rate.
    pub reduction_factor: u16,
    /// Used to scale the variable fee component depending on the dynamic of the market
    pub variable_fee_control: u32,
    /// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
    pub max_volatility_accumulator: u32,
    /// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
    pub protocol_share: u16,
    /// Base fee power factor
    pub base_fee_power_factor: u8,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePresetParameter2InstructionAccounts {
    pub preset_parameter: solana_pubkey::Pubkey,
    pub admin: solana_pubkey::Pubkey,
    pub system_program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl InitializePresetParameter2 {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[184, 7, 240, 171, 103, 47, 183, 121] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for InitializePresetParameter2 {
    type ArrangedAccounts = InitializePresetParameter2InstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let preset_parameter = next_account(&mut iter)?;
                let admin = next_account(&mut iter)?;
                let system_program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(InitializePresetParameter2InstructionAccounts {
                        preset_parameter: preset_parameter,
                        admin: admin,
                        system_program: system_program,
                        remaining: remaining.to_vec(),
        })
            }
}

