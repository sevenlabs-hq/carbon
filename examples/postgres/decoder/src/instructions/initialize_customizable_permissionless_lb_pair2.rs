//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;
use crate::types::CustomizableParams;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct InitializeCustomizablePermissionlessLbPair2 {
        pub params: CustomizableParams,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeCustomizablePermissionlessLbPair2InstructionAccounts {
    pub lb_pair: solana_pubkey::Pubkey,
    pub bin_array_bitmap_extension: Option<solana_pubkey::Pubkey>,
    pub token_mint_x: solana_pubkey::Pubkey,
    pub token_mint_y: solana_pubkey::Pubkey,
    pub reserve_x: solana_pubkey::Pubkey,
    pub reserve_y: solana_pubkey::Pubkey,
    pub oracle: solana_pubkey::Pubkey,
    pub user_token_x: solana_pubkey::Pubkey,
    pub funder: solana_pubkey::Pubkey,
    pub token_badge_x: Option<solana_pubkey::Pubkey>,
    pub token_badge_y: Option<solana_pubkey::Pubkey>,
    pub token_program_x: solana_pubkey::Pubkey,
    pub token_program_y: solana_pubkey::Pubkey,
    pub system_program: solana_pubkey::Pubkey,
    pub user_token_y: solana_pubkey::Pubkey,
    pub event_authority: solana_pubkey::Pubkey,
    pub program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl InitializeCustomizablePermissionlessLbPair2 {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[243, 73, 129, 126, 51, 19, 241, 107] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for InitializeCustomizablePermissionlessLbPair2 {
    type ArrangedAccounts = InitializeCustomizablePermissionlessLbPair2InstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let lb_pair = next_account(&mut iter)?;
                let bin_array_bitmap_extension = next_account(&mut iter);
                let token_mint_x = next_account(&mut iter)?;
                let token_mint_y = next_account(&mut iter)?;
                let reserve_x = next_account(&mut iter)?;
                let reserve_y = next_account(&mut iter)?;
                let oracle = next_account(&mut iter)?;
                let user_token_x = next_account(&mut iter)?;
                let funder = next_account(&mut iter)?;
                let token_badge_x = next_account(&mut iter);
                let token_badge_y = next_account(&mut iter);
                let token_program_x = next_account(&mut iter)?;
                let token_program_y = next_account(&mut iter)?;
                let system_program = next_account(&mut iter)?;
                let user_token_y = next_account(&mut iter)?;
                let event_authority = next_account(&mut iter)?;
                let program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(InitializeCustomizablePermissionlessLbPair2InstructionAccounts {
                        lb_pair: lb_pair,
                        bin_array_bitmap_extension: bin_array_bitmap_extension,
                        token_mint_x: token_mint_x,
                        token_mint_y: token_mint_y,
                        reserve_x: reserve_x,
                        reserve_y: reserve_y,
                        oracle: oracle,
                        user_token_x: user_token_x,
                        funder: funder,
                        token_badge_x: token_badge_x,
                        token_badge_y: token_badge_y,
                        token_program_x: token_program_x,
                        token_program_y: token_program_y,
                        system_program: system_program,
                        user_token_y: user_token_y,
                        event_authority: event_authority,
                        program: program,
                        remaining: remaining.to_vec(),
        })
            }
}

