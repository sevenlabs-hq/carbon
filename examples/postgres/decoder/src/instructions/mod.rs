//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

#[cfg(feature = "postgres")]
pub mod postgres;

use crate::{PROGRAM_ID, PumpAmmDecoder};

pub mod admin_set_coin_creator;
pub mod admin_update_token_incentives;
pub mod buy;
pub mod claim_token_incentives;
pub mod close_user_volume_accumulator;
pub mod collect_coin_creator_fee;
pub mod create_config;
pub mod create_pool;
pub mod deposit;
pub mod disable;
pub mod extend_account;
pub mod init_user_volume_accumulator;
pub mod sell;
pub mod set_coin_creator;
pub mod sync_user_volume_accumulator;
pub mod update_admin;
pub mod update_fee_config;
pub mod withdraw;

pub use self::admin_set_coin_creator::*;
pub use self::admin_update_token_incentives::*;
pub use self::buy::*;
pub use self::claim_token_incentives::*;
pub use self::close_user_volume_accumulator::*;
pub use self::collect_coin_creator_fee::*;
pub use self::create_config::*;
pub use self::create_pool::*;
pub use self::deposit::*;
pub use self::disable::*;
pub use self::extend_account::*;
pub use self::init_user_volume_accumulator::*;
pub use self::sell::*;
pub use self::set_coin_creator::*;
pub use self::sync_user_volume_accumulator::*;
pub use self::update_admin::*;
pub use self::update_fee_config::*;
pub use self::withdraw::*;

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(tag = "type", content = "data"))]
pub enum PumpAmmInstruction {
    AdminSetCoinCreator(AdminSetCoinCreator),
    AdminUpdateTokenIncentives(AdminUpdateTokenIncentives),
    Buy(Buy),
    ClaimTokenIncentives(ClaimTokenIncentives),
    CloseUserVolumeAccumulator(CloseUserVolumeAccumulator),
    CollectCoinCreatorFee(CollectCoinCreatorFee),
    CreateConfig(CreateConfig),
    CreatePool(CreatePool),
    Deposit(Deposit),
    Disable(Disable),
    ExtendAccount(ExtendAccount),
    InitUserVolumeAccumulator(InitUserVolumeAccumulator),
    Sell(Sell),
    SetCoinCreator(SetCoinCreator),
    SyncUserVolumeAccumulator(SyncUserVolumeAccumulator),
    UpdateAdmin(UpdateAdmin),
    UpdateFeeConfig(UpdateFeeConfig),
    Withdraw(Withdraw),
}

impl carbon_core::instruction::InstructionDecoder<'_> for PumpAmmDecoder {
    type InstructionType = PumpAmmInstruction;

    fn decode_instruction(
        &self,
        instruction: &solana_instruction::Instruction,
    ) -> Option<carbon_core::instruction::DecodedInstruction<Self::InstructionType>> {
        if !instruction.program_id.eq(&PROGRAM_ID) {
            return None;
        }

        let data = instruction.data.as_slice();
        
                // Try to decode AdminSetCoinCreator
        {
            if let Some(decoded) = admin_set_coin_creator::AdminSetCoinCreator::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::AdminSetCoinCreator(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode AdminUpdateTokenIncentives
        {
            if let Some(decoded) = admin_update_token_incentives::AdminUpdateTokenIncentives::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::AdminUpdateTokenIncentives(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode Buy
        {
            if let Some(decoded) = buy::Buy::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::Buy(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode ClaimTokenIncentives
        {
            if let Some(decoded) = claim_token_incentives::ClaimTokenIncentives::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::ClaimTokenIncentives(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CloseUserVolumeAccumulator
        {
            if let Some(decoded) = close_user_volume_accumulator::CloseUserVolumeAccumulator::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::CloseUserVolumeAccumulator(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CollectCoinCreatorFee
        {
            if let Some(decoded) = collect_coin_creator_fee::CollectCoinCreatorFee::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::CollectCoinCreatorFee(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CreateConfig
        {
            if let Some(decoded) = create_config::CreateConfig::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::CreateConfig(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CreatePool
        {
            if let Some(decoded) = create_pool::CreatePool::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::CreatePool(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode Deposit
        {
            if let Some(decoded) = deposit::Deposit::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::Deposit(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode Disable
        {
            if let Some(decoded) = disable::Disable::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::Disable(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode ExtendAccount
        {
            if let Some(decoded) = extend_account::ExtendAccount::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::ExtendAccount(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode InitUserVolumeAccumulator
        {
            if let Some(decoded) = init_user_volume_accumulator::InitUserVolumeAccumulator::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::InitUserVolumeAccumulator(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode Sell
        {
            if let Some(decoded) = sell::Sell::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::Sell(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode SetCoinCreator
        {
            if let Some(decoded) = set_coin_creator::SetCoinCreator::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::SetCoinCreator(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode SyncUserVolumeAccumulator
        {
            if let Some(decoded) = sync_user_volume_accumulator::SyncUserVolumeAccumulator::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::SyncUserVolumeAccumulator(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode UpdateAdmin
        {
            if let Some(decoded) = update_admin::UpdateAdmin::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::UpdateAdmin(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode UpdateFeeConfig
        {
            if let Some(decoded) = update_fee_config::UpdateFeeConfig::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::UpdateFeeConfig(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode Withdraw
        {
            if let Some(decoded) = withdraw::Withdraw::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: PumpAmmInstruction::Withdraw(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                
        None
    }
}

