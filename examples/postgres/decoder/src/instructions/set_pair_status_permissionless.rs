//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct SetPairStatusPermissionless {
        pub status: u8,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetPairStatusPermissionlessInstructionAccounts {
    pub lb_pair: solana_pubkey::Pubkey,
    pub creator: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl SetPairStatusPermissionless {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[78, 59, 152, 211, 70, 183, 46, 208] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for SetPairStatusPermissionless {
    type ArrangedAccounts = SetPairStatusPermissionlessInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let lb_pair = next_account(&mut iter)?;
                let creator = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(SetPairStatusPermissionlessInstructionAccounts {
                        lb_pair: lb_pair,
                        creator: creator,
                        remaining: remaining.to_vec(),
        })
            }
}

