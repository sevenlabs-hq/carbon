//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;
use solana_pubkey::Pubkey;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct CreatePool {
        pub index: u16,
        pub base_amount_in: u64,
        pub quote_amount_in: u64,
        pub coin_creator: Pubkey,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePoolInstructionAccounts {
    pub pool: solana_pubkey::Pubkey,
    pub global_config: solana_pubkey::Pubkey,
    pub creator: solana_pubkey::Pubkey,
    pub base_mint: solana_pubkey::Pubkey,
    pub quote_mint: solana_pubkey::Pubkey,
    pub lp_mint: solana_pubkey::Pubkey,
    pub user_base_token_account: solana_pubkey::Pubkey,
    pub user_quote_token_account: solana_pubkey::Pubkey,
    pub user_pool_token_account: solana_pubkey::Pubkey,
    pub pool_base_token_account: solana_pubkey::Pubkey,
    pub pool_quote_token_account: solana_pubkey::Pubkey,
    pub system_program: solana_pubkey::Pubkey,
    pub token2022_program: solana_pubkey::Pubkey,
    pub base_token_program: solana_pubkey::Pubkey,
    pub quote_token_program: solana_pubkey::Pubkey,
    pub associated_token_program: solana_pubkey::Pubkey,
    pub event_authority: solana_pubkey::Pubkey,
    pub program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl CreatePool {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[233, 146, 209, 142, 207, 104, 64, 188] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for CreatePool {
    type ArrangedAccounts = CreatePoolInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let pool = next_account(&mut iter)?;
                let global_config = next_account(&mut iter)?;
                let creator = next_account(&mut iter)?;
                let base_mint = next_account(&mut iter)?;
                let quote_mint = next_account(&mut iter)?;
                let lp_mint = next_account(&mut iter)?;
                let user_base_token_account = next_account(&mut iter)?;
                let user_quote_token_account = next_account(&mut iter)?;
                let user_pool_token_account = next_account(&mut iter)?;
                let pool_base_token_account = next_account(&mut iter)?;
                let pool_quote_token_account = next_account(&mut iter)?;
                let system_program = next_account(&mut iter)?;
                let token2022_program = next_account(&mut iter)?;
                let base_token_program = next_account(&mut iter)?;
                let quote_token_program = next_account(&mut iter)?;
                let associated_token_program = next_account(&mut iter)?;
                let event_authority = next_account(&mut iter)?;
                let program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(CreatePoolInstructionAccounts {
                        pool: pool,
                        global_config: global_config,
                        creator: creator,
                        base_mint: base_mint,
                        quote_mint: quote_mint,
                        lp_mint: lp_mint,
                        user_base_token_account: user_base_token_account,
                        user_quote_token_account: user_quote_token_account,
                        user_pool_token_account: user_pool_token_account,
                        pool_base_token_account: pool_base_token_account,
                        pool_quote_token_account: pool_quote_token_account,
                        system_program: system_program,
                        token2022_program: token2022_program,
                        base_token_program: base_token_program,
                        quote_token_program: quote_token_program,
                        associated_token_program: associated_token_program,
                        event_authority: event_authority,
                        program: program,
                        remaining: remaining.to_vec(),
        })
            }
}

