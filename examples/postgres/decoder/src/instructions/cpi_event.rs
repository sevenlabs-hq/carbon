//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!


pub use super::super::events;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;

#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub enum CpiEvent {
    AddLiquidity(events::add_liquidity::AddLiquidityEvent),
    ClaimFee(events::claim_fee::ClaimFeeEvent),
    ClaimReward(events::claim_reward::ClaimRewardEvent),
    CompositionFee(events::composition_fee::CompositionFeeEvent),
    DecreasePositionLength(events::decrease_position_length::DecreasePositionLengthEvent),
    DynamicFeeParameterUpdate(events::dynamic_fee_parameter_update::DynamicFeeParameterUpdateEvent),
    FeeParameterUpdate(events::fee_parameter_update::FeeParameterUpdateEvent),
    FundReward(events::fund_reward::FundRewardEvent),
    GoToABin(events::go_to_a_bin::GoToABinEvent),
    IncreaseObservation(events::increase_observation::IncreaseObservationEvent),
    IncreasePositionLength(events::increase_position_length::IncreasePositionLengthEvent),
    InitializeReward(events::initialize_reward::InitializeRewardEvent),
    LbPairCreate(events::lb_pair_create::LbPairCreateEvent),
    PositionClose(events::position_close::PositionCloseEvent),
    PositionCreate(events::position_create::PositionCreateEvent),
    Rebalancing(events::rebalancing::RebalancingEvent),
    RemoveLiquidity(events::remove_liquidity::RemoveLiquidityEvent),
    Swap(events::swap::SwapEvent),
    UpdatePositionLockReleasePoint(events::update_position_lock_release_point::UpdatePositionLockReleasePointEvent),
    UpdatePositionOperator(events::update_position_operator::UpdatePositionOperatorEvent),
    UpdateRewardDuration(events::update_reward_duration::UpdateRewardDurationEvent),
    UpdateRewardFunder(events::update_reward_funder::UpdateRewardFunderEvent),
    WithdrawIneligibleReward(events::withdraw_ineligible_reward::WithdrawIneligibleRewardEvent),
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CpiEventInstructionAccounts {
    pub program: solana_pubkey::Pubkey,
    pub event_authority: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl CpiEvent {
    pub fn decode(data: &[u8]) -> Option<Self> {
        if data.len() < 8 {
            return None;
        }
        let discriminator = &data[0..8];
        if discriminator != &[29, 154, 203, 81, 46, 165, 69, 228] {
            return None;
        }

        let mut data_slice = data;

        data_slice = &data_slice[8..];

        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for CpiEvent {
    type ArrangedAccounts = CpiEventInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
        let mut iter = accounts.iter();

        let [program, event_authority, remaining @ ..] = accounts else {
            return None;
        };

        Some(CpiEventInstructionAccounts {
            program: program.pubkey,
            event_authority: event_authority.pubkey,
            remaining: remaining.to_vec(),
        })
    }
}

