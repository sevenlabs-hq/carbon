//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

pub mod admin_set_coin_creator_row;
pub mod admin_update_token_incentives_row;
pub mod buy_row;
pub mod claim_token_incentives_row;
pub mod close_user_volume_accumulator_row;
pub mod collect_coin_creator_fee_row;
pub mod create_config_row;
pub mod create_pool_row;
pub mod deposit_row;
pub mod disable_row;
pub mod extend_account_row;
pub mod init_user_volume_accumulator_row;
pub mod sell_row;
pub mod set_coin_creator_row;
pub mod sync_user_volume_accumulator_row;
pub mod update_admin_row;
pub mod update_fee_config_row;
pub mod withdraw_row;

pub use self::admin_set_coin_creator_row::*;
pub use self::admin_update_token_incentives_row::*;
pub use self::buy_row::*;
pub use self::claim_token_incentives_row::*;
pub use self::close_user_volume_accumulator_row::*;
pub use self::collect_coin_creator_fee_row::*;
pub use self::create_config_row::*;
pub use self::create_pool_row::*;
pub use self::deposit_row::*;
pub use self::disable_row::*;
pub use self::extend_account_row::*;
pub use self::init_user_volume_accumulator_row::*;
pub use self::sell_row::*;
pub use self::set_coin_creator_row::*;
pub use self::sync_user_volume_accumulator_row::*;
pub use self::update_admin_row::*;
pub use self::update_fee_config_row::*;
pub use self::withdraw_row::*;

use super::PumpAmmInstruction;

pub struct PumpAmmInstructionsMigration;

impl sqlx_migrator::Migration<sqlx::Postgres> for PumpAmmInstructionsMigration {
    fn app(&self) -> &str {
        "pump-amm"
    }

    fn name(&self) -> &str {
        "pump_amm_instructions"
    }

    fn operations(&self) -> Vec<Box<dyn sqlx_migrator::Operation<sqlx::Postgres>>> {
        vec![
            Box::new(AdminSetCoinCreatorMigrationOperation),
            Box::new(AdminUpdateTokenIncentivesMigrationOperation),
            Box::new(BuyMigrationOperation),
            Box::new(ClaimTokenIncentivesMigrationOperation),
            Box::new(CloseUserVolumeAccumulatorMigrationOperation),
            Box::new(CollectCoinCreatorFeeMigrationOperation),
            Box::new(CreateConfigMigrationOperation),
            Box::new(CreatePoolMigrationOperation),
            Box::new(DepositMigrationOperation),
            Box::new(DisableMigrationOperation),
            Box::new(ExtendAccountMigrationOperation),
            Box::new(InitUserVolumeAccumulatorMigrationOperation),
            Box::new(SellMigrationOperation),
            Box::new(SetCoinCreatorMigrationOperation),
            Box::new(SyncUserVolumeAccumulatorMigrationOperation),
            Box::new(UpdateAdminMigrationOperation),
            Box::new(UpdateFeeConfigMigrationOperation),
            Box::new(WithdrawMigrationOperation),
        ]
    }

    fn parents(&self) -> Vec<Box<dyn sqlx_migrator::Migration<sqlx::Postgres>>> {
        vec![]
    }
}

pub struct PumpAmmInstructionWithMetadata(
    pub PumpAmmInstruction,
    pub carbon_core::instruction::InstructionMetadata,
);

impl
    From<(
        PumpAmmInstruction,
        carbon_core::instruction::InstructionMetadata,
    )> for PumpAmmInstructionWithMetadata
{
    fn from(
        value: (
            PumpAmmInstruction,
            carbon_core::instruction::InstructionMetadata,
        ),
    ) -> Self {
        PumpAmmInstructionWithMetadata(value.0, value.1)
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for PumpAmmInstructionWithMetadata {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        let PumpAmmInstructionWithMetadata(instruction, metadata) = self;
        match instruction {
            PumpAmmInstruction::AdminSetCoinCreator(instruction) => {
                let row = admin_set_coin_creator_row::AdminSetCoinCreatorRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::AdminUpdateTokenIncentives(instruction) => {
                let row =
                    admin_update_token_incentives_row::AdminUpdateTokenIncentivesRow::from_parts(
                        instruction.clone(),
                        metadata.clone(),
                    );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Buy(instruction) => {
                let row = buy_row::BuyRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::ClaimTokenIncentives(instruction) => {
                let row = claim_token_incentives_row::ClaimTokenIncentivesRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::CloseUserVolumeAccumulator(instruction) => {
                let row =
                    close_user_volume_accumulator_row::CloseUserVolumeAccumulatorRow::from_parts(
                        instruction.clone(),
                        metadata.clone(),
                    );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::CollectCoinCreatorFee(instruction) => {
                let row = collect_coin_creator_fee_row::CollectCoinCreatorFeeRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::CreateConfig(instruction) => {
                let row = create_config_row::CreateConfigRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::CreatePool(instruction) => {
                let row = create_pool_row::CreatePoolRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Deposit(instruction) => {
                let row =
                    deposit_row::DepositRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Disable(instruction) => {
                let row =
                    disable_row::DisableRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::ExtendAccount(instruction) => {
                let row = extend_account_row::ExtendAccountRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::InitUserVolumeAccumulator(instruction) => {
                let row =
                    init_user_volume_accumulator_row::InitUserVolumeAccumulatorRow::from_parts(
                        instruction.clone(),
                        metadata.clone(),
                    );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Sell(instruction) => {
                let row = sell_row::SellRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::SetCoinCreator(instruction) => {
                let row = set_coin_creator_row::SetCoinCreatorRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::SyncUserVolumeAccumulator(instruction) => {
                let row =
                    sync_user_volume_accumulator_row::SyncUserVolumeAccumulatorRow::from_parts(
                        instruction.clone(),
                        metadata.clone(),
                    );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::UpdateAdmin(instruction) => {
                let row = update_admin_row::UpdateAdminRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::UpdateFeeConfig(instruction) => {
                let row = update_fee_config_row::UpdateFeeConfigRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.insert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Withdraw(instruction) => {
                let row =
                    withdraw_row::WithdrawRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
        }
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for PumpAmmInstructionWithMetadata {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        let PumpAmmInstructionWithMetadata(instruction, metadata) = self;
        match instruction {
            PumpAmmInstruction::AdminSetCoinCreator(instruction) => {
                let row = admin_set_coin_creator_row::AdminSetCoinCreatorRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::AdminUpdateTokenIncentives(instruction) => {
                let row =
                    admin_update_token_incentives_row::AdminUpdateTokenIncentivesRow::from_parts(
                        instruction.clone(),
                        metadata.clone(),
                    );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Buy(instruction) => {
                let row = buy_row::BuyRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::ClaimTokenIncentives(instruction) => {
                let row = claim_token_incentives_row::ClaimTokenIncentivesRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::CloseUserVolumeAccumulator(instruction) => {
                let row =
                    close_user_volume_accumulator_row::CloseUserVolumeAccumulatorRow::from_parts(
                        instruction.clone(),
                        metadata.clone(),
                    );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::CollectCoinCreatorFee(instruction) => {
                let row = collect_coin_creator_fee_row::CollectCoinCreatorFeeRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::CreateConfig(instruction) => {
                let row = create_config_row::CreateConfigRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::CreatePool(instruction) => {
                let row = create_pool_row::CreatePoolRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Deposit(instruction) => {
                let row =
                    deposit_row::DepositRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Disable(instruction) => {
                let row =
                    disable_row::DisableRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::ExtendAccount(instruction) => {
                let row = extend_account_row::ExtendAccountRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::InitUserVolumeAccumulator(instruction) => {
                let row =
                    init_user_volume_accumulator_row::InitUserVolumeAccumulatorRow::from_parts(
                        instruction.clone(),
                        metadata.clone(),
                    );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Sell(instruction) => {
                let row = sell_row::SellRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::SetCoinCreator(instruction) => {
                let row = set_coin_creator_row::SetCoinCreatorRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::SyncUserVolumeAccumulator(instruction) => {
                let row =
                    sync_user_volume_accumulator_row::SyncUserVolumeAccumulatorRow::from_parts(
                        instruction.clone(),
                        metadata.clone(),
                    );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::UpdateAdmin(instruction) => {
                let row = update_admin_row::UpdateAdminRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::UpdateFeeConfig(instruction) => {
                let row = update_fee_config_row::UpdateFeeConfigRow::from_parts(
                    instruction.clone(),
                    metadata.clone(),
                );
                row.upsert(pool).await?;
                Ok(())
            }
            PumpAmmInstruction::Withdraw(instruction) => {
                let row =
                    withdraw_row::WithdrawRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
        }
    }
}
