//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!


use carbon_core::{postgres::metadata::InstructionRowMetadata, instruction::InstructionMetadata};
use super::super::cpi_event::CpiEvent;

#[derive(sqlx::FromRow, Debug, Clone)]
pub struct CpiEventRow {
    #[sqlx(flatten)]
    pub metadata: InstructionRowMetadata,
    pub name: String,
    pub data: sqlx::types::Json<CpiEvent>
}

impl CpiEventRow {
    pub fn from_parts(source: CpiEvent, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
            name: match &source {
                                CpiEvent::AddLiquidity(_) => "add_liquidity".to_string(),
                                CpiEvent::ClaimFee(_) => "claim_fee".to_string(),
                                CpiEvent::ClaimReward(_) => "claim_reward".to_string(),
                                CpiEvent::CompositionFee(_) => "composition_fee".to_string(),
                                CpiEvent::DecreasePositionLength(_) => "decrease_position_length".to_string(),
                                CpiEvent::DynamicFeeParameterUpdate(_) => "dynamic_fee_parameter_update".to_string(),
                                CpiEvent::FeeParameterUpdate(_) => "fee_parameter_update".to_string(),
                                CpiEvent::FundReward(_) => "fund_reward".to_string(),
                                CpiEvent::GoToABin(_) => "go_to_a_bin".to_string(),
                                CpiEvent::IncreaseObservation(_) => "increase_observation".to_string(),
                                CpiEvent::IncreasePositionLength(_) => "increase_position_length".to_string(),
                                CpiEvent::InitializeReward(_) => "initialize_reward".to_string(),
                                CpiEvent::LbPairCreate(_) => "lb_pair_create".to_string(),
                                CpiEvent::PositionClose(_) => "position_close".to_string(),
                                CpiEvent::PositionCreate(_) => "position_create".to_string(),
                                CpiEvent::Rebalancing(_) => "rebalancing".to_string(),
                                CpiEvent::RemoveLiquidity(_) => "remove_liquidity".to_string(),
                                CpiEvent::Swap(_) => "swap".to_string(),
                                CpiEvent::UpdatePositionLockReleasePoint(_) => "update_position_lock_release_point".to_string(),
                                CpiEvent::UpdatePositionOperator(_) => "update_position_operator".to_string(),
                                CpiEvent::UpdateRewardDuration(_) => "update_reward_duration".to_string(),
                                CpiEvent::UpdateRewardFunder(_) => "update_reward_funder".to_string(),
                                CpiEvent::WithdrawIneligibleReward(_) => "withdraw_ineligible_reward".to_string(),
                            },
            data: sqlx::types::Json(source),
        }
    }
}

impl TryFrom<CpiEventRow> for CpiEvent {
    type Error = carbon_core::error::Error;
    fn try_from(source: CpiEventRow) -> Result<Self, Self::Error> {
        Ok(source.data.0)
    }
}

impl carbon_core::postgres::operations::Table for CpiEvent {
    fn table() -> &'static str {
        "cpi_events"
    }

    fn columns() -> Vec<&'static str> {
        vec![
            "__signature",
            "__instruction_index",
            "__stack_height",
            "__slot",
            "name",
            "data",
        ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for CpiEventRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO cpi_events (
            __signature, __instruction_index, __stack_height, __slot, "name", "data"
            ) VALUES (
            $1, $2, $3, $4, $5, $6
        )"#)
        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
        .bind(self.name.clone())
        .bind(self.data.clone())
        .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for CpiEventRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO cpi_events (
            __signature, __instruction_index, __stack_height, __slot, "name", "data"
        ) VALUES (
            $1, $2, $3, $4, $5, $6
        ) ON CONFLICT (__signature, __instruction_index) DO UPDATE SET
            __slot = EXCLUDED.__slot,
            "name" = EXCLUDED."name",
            "data" = EXCLUDED."data"
        "#)
        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
        .bind(self.name.clone())
        .bind(self.data.clone())
        .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for CpiEventRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM cpi_events WHERE
            __signature = $1 AND __instruction_index = $2
        "#)
        .bind(key.0)
        .bind(key.1)
        .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for CpiEventRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM cpi_events WHERE
            __signature = $1 AND __instruction_index = $2
        "#)
        .bind(key.0)
        .bind(key.1)
        .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct CpiEventMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for CpiEventMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS cpi_events (
            -- Instruction data
            "name" TEXT NOT NULL,
            "data" JSONB NOT NULL,

            -- Instruction metadata
            __signature TEXT NOT NULL,
            __instruction_index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot NUMERIC(20),

            PRIMARY KEY (__signature, __instruction_index)
        )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS cpi_events"#).execute(connection).await?;
        Ok(())
    }
}

