//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::instruction::InstructionMetadata;
use carbon_core::postgres::metadata::InstructionRowMetadata;
use carbon_core::postgres::primitives::U16;
use carbon_core::postgres::primitives::U32;
use crate::instructions::InitializePresetParameter;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct InitializePresetParameterRow {
    #[sqlx(flatten)]
        pub metadata: InstructionRowMetadata,
            pub bin_step: U16,
        pub base_factor: U16,
        pub filter_period: U16,
        pub decay_period: U16,
        pub reduction_factor: U16,
        pub variable_fee_control: U32,
        pub max_volatility_accumulator: U32,
        pub protocol_share: U16,
}

impl InitializePresetParameterRow {
    pub fn from_parts(source: InitializePresetParameter, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        bin_step: source.bin_step.into(),
                        base_factor: source.base_factor.into(),
                        filter_period: source.filter_period.into(),
                        decay_period: source.decay_period.into(),
                        reduction_factor: source.reduction_factor.into(),
                        variable_fee_control: source.variable_fee_control.into(),
                        max_volatility_accumulator: source.max_volatility_accumulator.into(),
                        protocol_share: source.protocol_share.into(),
                    }
    }
}

impl TryFrom<InitializePresetParameterRow> for InitializePresetParameter {
    type Error = carbon_core::error::Error;
    fn try_from(source: InitializePresetParameterRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        bin_step: source.bin_step.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        base_factor: source.base_factor.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        filter_period: source.filter_period.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        decay_period: source.decay_period.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        reduction_factor: source.reduction_factor.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        variable_fee_control: source.variable_fee_control.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        max_volatility_accumulator: source.max_volatility_accumulator.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        protocol_share: source.protocol_share.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                    })
    }
}

impl carbon_core::postgres::operations::Table for InitializePresetParameter {
    fn table() -> &'static str {
        "initialize_preset_parameter_instruction"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__signature",
            "__instruction_index",
            "__stack_height",
            "__slot",
                                    "bin_step",
                        "base_factor",
                        "filter_period",
                        "decay_period",
                        "reduction_factor",
                        "variable_fee_control",
                        "max_volatility_accumulator",
                        "protocol_share",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for InitializePresetParameterRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO initialize_preset_parameter_instruction (
                            "bin_step",
                            "base_factor",
                            "filter_period",
                            "decay_period",
                            "reduction_factor",
                            "variable_fee_control",
                            "max_volatility_accumulator",
                            "protocol_share",
                                        __signature, __instruction_index, __stack_height, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7,                            $8,                            $9,                            $10,                            $11,                            $12                    )"#)
                .bind(self.bin_step.clone())
                .bind(self.base_factor.clone())
                .bind(self.filter_period.clone())
                .bind(self.decay_period.clone())
                .bind(self.reduction_factor.clone())
                .bind(self.variable_fee_control.clone())
                .bind(self.max_volatility_accumulator.clone())
                .bind(self.protocol_share.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for InitializePresetParameterRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO initialize_preset_parameter_instruction (
                        "bin_step",
                        "base_factor",
                        "filter_period",
                        "decay_period",
                        "reduction_factor",
                        "variable_fee_control",
                        "max_volatility_accumulator",
                        "protocol_share",
                                    __signature, __instruction_index, __stack_height, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7,                        $8,                        $9,                        $10,                        $11,                        $12                    ) ON CONFLICT (
                        __signature, __instruction_index
                    ) DO UPDATE SET
                        "bin_step" = EXCLUDED."bin_step",
                        "base_factor" = EXCLUDED."base_factor",
                        "filter_period" = EXCLUDED."filter_period",
                        "decay_period" = EXCLUDED."decay_period",
                        "reduction_factor" = EXCLUDED."reduction_factor",
                        "variable_fee_control" = EXCLUDED."variable_fee_control",
                        "max_volatility_accumulator" = EXCLUDED."max_volatility_accumulator",
                        "protocol_share" = EXCLUDED."protocol_share",
                                    __instruction_index = EXCLUDED.__instruction_index,
            __stack_height = EXCLUDED.__stack_height,
            __slot = EXCLUDED.__slot
                    "#)
                .bind(self.bin_step.clone())
                .bind(self.base_factor.clone())
                .bind(self.filter_period.clone())
                .bind(self.decay_period.clone())
                .bind(self.reduction_factor.clone())
                .bind(self.variable_fee_control.clone())
                .bind(self.max_volatility_accumulator.clone())
                .bind(self.protocol_share.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for InitializePresetParameterRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM initialize_preset_parameter_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for InitializePresetParameterRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM initialize_preset_parameter_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct InitializePresetParameterMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for InitializePresetParameterMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS initialize_preset_parameter_instruction (
                        -- Instruction data
                                    "bin_step" INT4 NOT NULL,
                        "base_factor" INT4 NOT NULL,
                        "filter_period" INT4 NOT NULL,
                        "decay_period" INT4 NOT NULL,
                        "reduction_factor" INT4 NOT NULL,
                        "variable_fee_control" INT8 NOT NULL,
                        "max_volatility_accumulator" INT8 NOT NULL,
                        "protocol_share" INT4 NOT NULL,
            
                        -- Instruction metadata
            __signature TEXT NOT NULL,
            __instruction_index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__signature, __instruction_index)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS initialize_preset_parameter_instruction"#).execute(connection).await?;
        Ok(())
    }
}

