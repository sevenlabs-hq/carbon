//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::instruction::InstructionMetadata;
use carbon_core::postgres::metadata::InstructionRowMetadata;
use carbon_core::postgres::primitives::U8;
use crate::instructions::SetPairStatusPermissionless;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct SetPairStatusPermissionlessRow {
    #[sqlx(flatten)]
        pub metadata: InstructionRowMetadata,
            pub status: U8,
}

impl SetPairStatusPermissionlessRow {
    pub fn from_parts(source: SetPairStatusPermissionless, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        status: source.status.into(),
                    }
    }
}

impl TryFrom<SetPairStatusPermissionlessRow> for SetPairStatusPermissionless {
    type Error = carbon_core::error::Error;
    fn try_from(source: SetPairStatusPermissionlessRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        status: source.status.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                    })
    }
}

impl carbon_core::postgres::operations::Table for SetPairStatusPermissionless {
    fn table() -> &'static str {
        "set_pair_status_permissionless_instruction"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__signature",
            "__instruction_index",
            "__stack_height",
            "__slot",
                                    "status",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for SetPairStatusPermissionlessRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO set_pair_status_permissionless_instruction (
                            "status",
                                        __signature, __instruction_index, __stack_height, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5                    )"#)
                .bind(self.status.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for SetPairStatusPermissionlessRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO set_pair_status_permissionless_instruction (
                        "status",
                                    __signature, __instruction_index, __stack_height, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5                    ) ON CONFLICT (
                        __signature, __instruction_index
                    ) DO UPDATE SET
                        "status" = EXCLUDED."status",
                                    __instruction_index = EXCLUDED.__instruction_index,
            __stack_height = EXCLUDED.__stack_height,
            __slot = EXCLUDED.__slot
                    "#)
                .bind(self.status.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for SetPairStatusPermissionlessRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM set_pair_status_permissionless_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for SetPairStatusPermissionlessRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM set_pair_status_permissionless_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct SetPairStatusPermissionlessMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for SetPairStatusPermissionlessMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS set_pair_status_permissionless_instruction (
                        -- Instruction data
                                    "status" INT2 NOT NULL,
            
                        -- Instruction metadata
            __signature TEXT NOT NULL,
            __instruction_index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__signature, __instruction_index)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS set_pair_status_permissionless_instruction"#).execute(connection).await?;
        Ok(())
    }
}

