//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::instruction::InstructionMetadata;
use carbon_core::postgres::metadata::InstructionRowMetadata;
use carbon_core::postgres::primitives::U16;
use carbon_core::postgres::primitives::U64;
use crate::instructions::RebalanceLiquidity;
use crate::types::AddLiquidityParams;
use crate::types::RemainingAccountsInfo;
use crate::types::RemoveLiquidityParams;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct RebalanceLiquidityRow {
    #[sqlx(flatten)]
        pub metadata: InstructionRowMetadata,
            pub active_id: i32,
        pub max_active_bin_slippage: U16,
        pub should_claim_fee: bool,
        pub should_claim_reward: bool,
        pub min_withdraw_x_amount: U64,
        pub max_deposit_x_amount: U64,
        pub min_withdraw_y_amount: U64,
        pub max_deposit_y_amount: U64,
        pub padding: Vec<u8>,
        pub removes: sqlx::types::Json<Vec<RemoveLiquidityParams>>,
        pub adds: sqlx::types::Json<Vec<AddLiquidityParams>>,
        pub remaining_accounts_info: sqlx::types::Json<RemainingAccountsInfo>,
}

impl RebalanceLiquidityRow {
    pub fn from_parts(source: RebalanceLiquidity, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        active_id: source.active_id.into(),
                        max_active_bin_slippage: source.max_active_bin_slippage.into(),
                        should_claim_fee: source.should_claim_fee.into(),
                        should_claim_reward: source.should_claim_reward.into(),
                        min_withdraw_x_amount: source.min_withdraw_x_amount.into(),
                        max_deposit_x_amount: source.max_deposit_x_amount.into(),
                        min_withdraw_y_amount: source.min_withdraw_y_amount.into(),
                        max_deposit_y_amount: source.max_deposit_y_amount.into(),
                        padding: source.padding.into(),
                        removes: sqlx::types::Json(source.removes.into_iter().map(|element| element.into()).collect()),
                        adds: sqlx::types::Json(source.adds.into_iter().map(|element| element.into()).collect()),
                        remaining_accounts_info: sqlx::types::Json(source.remaining_accounts_info.into()),
                    }
    }
}

impl TryFrom<RebalanceLiquidityRow> for RebalanceLiquidity {
    type Error = carbon_core::error::Error;
    fn try_from(source: RebalanceLiquidityRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        active_id: source.active_id.into(),
                        max_active_bin_slippage: source.max_active_bin_slippage.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        should_claim_fee: source.should_claim_fee.into(),
                        should_claim_reward: source.should_claim_reward.into(),
                        min_withdraw_x_amount: *source.min_withdraw_x_amount,
                        max_deposit_x_amount: *source.max_deposit_x_amount,
                        min_withdraw_y_amount: *source.min_withdraw_y_amount,
                        max_deposit_y_amount: *source.max_deposit_y_amount,
                        padding: source.padding.into(),
                        removes: source.removes.0,
                        adds: source.adds.0,
                        remaining_accounts_info: source.remaining_accounts_info.0,
                    })
    }
}

impl carbon_core::postgres::operations::Table for RebalanceLiquidity {
    fn table() -> &'static str {
        "rebalance_liquidity_instruction"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__signature",
            "__instruction_index",
            "__stack_height",
            "__slot",
                                    "active_id",
                        "max_active_bin_slippage",
                        "should_claim_fee",
                        "should_claim_reward",
                        "min_withdraw_x_amount",
                        "max_deposit_x_amount",
                        "min_withdraw_y_amount",
                        "max_deposit_y_amount",
                        "padding",
                        "removes",
                        "adds",
                        "remaining_accounts_info",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for RebalanceLiquidityRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO rebalance_liquidity_instruction (
                            "active_id",
                            "max_active_bin_slippage",
                            "should_claim_fee",
                            "should_claim_reward",
                            "min_withdraw_x_amount",
                            "max_deposit_x_amount",
                            "min_withdraw_y_amount",
                            "max_deposit_y_amount",
                            "padding",
                            "removes",
                            "adds",
                            "remaining_accounts_info",
                                        __signature, __instruction_index, __stack_height, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7,                            $8,                            $9,                            $10,                            $11,                            $12,                            $13,                            $14,                            $15,                            $16                    )"#)
                .bind(self.active_id.clone())
                .bind(self.max_active_bin_slippage.clone())
                .bind(self.should_claim_fee.clone())
                .bind(self.should_claim_reward.clone())
                .bind(self.min_withdraw_x_amount.clone())
                .bind(self.max_deposit_x_amount.clone())
                .bind(self.min_withdraw_y_amount.clone())
                .bind(self.max_deposit_y_amount.clone())
                .bind(self.padding.clone())
                .bind(self.removes.clone())
                .bind(self.adds.clone())
                .bind(self.remaining_accounts_info.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for RebalanceLiquidityRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO rebalance_liquidity_instruction (
                        "active_id",
                        "max_active_bin_slippage",
                        "should_claim_fee",
                        "should_claim_reward",
                        "min_withdraw_x_amount",
                        "max_deposit_x_amount",
                        "min_withdraw_y_amount",
                        "max_deposit_y_amount",
                        "padding",
                        "removes",
                        "adds",
                        "remaining_accounts_info",
                                    __signature, __instruction_index, __stack_height, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7,                        $8,                        $9,                        $10,                        $11,                        $12,                        $13,                        $14,                        $15,                        $16                    ) ON CONFLICT (
                        __signature, __instruction_index
                    ) DO UPDATE SET
                        "active_id" = EXCLUDED."active_id",
                        "max_active_bin_slippage" = EXCLUDED."max_active_bin_slippage",
                        "should_claim_fee" = EXCLUDED."should_claim_fee",
                        "should_claim_reward" = EXCLUDED."should_claim_reward",
                        "min_withdraw_x_amount" = EXCLUDED."min_withdraw_x_amount",
                        "max_deposit_x_amount" = EXCLUDED."max_deposit_x_amount",
                        "min_withdraw_y_amount" = EXCLUDED."min_withdraw_y_amount",
                        "max_deposit_y_amount" = EXCLUDED."max_deposit_y_amount",
                        "padding" = EXCLUDED."padding",
                        "removes" = EXCLUDED."removes",
                        "adds" = EXCLUDED."adds",
                        "remaining_accounts_info" = EXCLUDED."remaining_accounts_info",
                                    __instruction_index = EXCLUDED.__instruction_index,
            __stack_height = EXCLUDED.__stack_height,
            __slot = EXCLUDED.__slot
                    "#)
                .bind(self.active_id.clone())
                .bind(self.max_active_bin_slippage.clone())
                .bind(self.should_claim_fee.clone())
                .bind(self.should_claim_reward.clone())
                .bind(self.min_withdraw_x_amount.clone())
                .bind(self.max_deposit_x_amount.clone())
                .bind(self.min_withdraw_y_amount.clone())
                .bind(self.max_deposit_y_amount.clone())
                .bind(self.padding.clone())
                .bind(self.removes.clone())
                .bind(self.adds.clone())
                .bind(self.remaining_accounts_info.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for RebalanceLiquidityRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM rebalance_liquidity_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for RebalanceLiquidityRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM rebalance_liquidity_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct RebalanceLiquidityMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for RebalanceLiquidityMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS rebalance_liquidity_instruction (
                        -- Instruction data
                                    "active_id" INT4 NOT NULL,
                        "max_active_bin_slippage" INT4 NOT NULL,
                        "should_claim_fee" BOOLEAN NOT NULL,
                        "should_claim_reward" BOOLEAN NOT NULL,
                        "min_withdraw_x_amount" NUMERIC(20) NOT NULL,
                        "max_deposit_x_amount" NUMERIC(20) NOT NULL,
                        "min_withdraw_y_amount" NUMERIC(20) NOT NULL,
                        "max_deposit_y_amount" NUMERIC(20) NOT NULL,
                        "padding" BYTEA NOT NULL,
                        "removes" JSONB NOT NULL,
                        "adds" JSONB NOT NULL,
                        "remaining_accounts_info" JSONB NOT NULL,
            
                        -- Instruction metadata
            __signature TEXT NOT NULL,
            __instruction_index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__signature, __instruction_index)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS rebalance_liquidity_instruction"#).execute(connection).await?;
        Ok(())
    }
}

