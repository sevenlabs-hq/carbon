//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::instruction::InstructionMetadata;
use carbon_core::postgres::metadata::InstructionRowMetadata;
use carbon_core::postgres::primitives::Pubkey;
use carbon_core::postgres::primitives::U64;
use crate::instructions::UpdateFeeConfig;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct UpdateFeeConfigRow {
    #[sqlx(flatten)]
        pub metadata: InstructionRowMetadata,
            pub lp_fee_basis_points: U64,
        pub protocol_fee_basis_points: U64,
        pub protocol_fee_recipients: Vec<Pubkey>,
        pub coin_creator_fee_basis_points: U64,
        pub admin_set_coin_creator_authority: Pubkey,
}

impl UpdateFeeConfigRow {
    pub fn from_parts(source: UpdateFeeConfig, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        lp_fee_basis_points: source.lp_fee_basis_points.into(),
                        protocol_fee_basis_points: source.protocol_fee_basis_points.into(),
                        protocol_fee_recipients: source.protocol_fee_recipients.into_iter().map(|element| element.into()).collect(),
                        coin_creator_fee_basis_points: source.coin_creator_fee_basis_points.into(),
                        admin_set_coin_creator_authority: source.admin_set_coin_creator_authority.into(),
                    }
    }
}

impl TryFrom<UpdateFeeConfigRow> for UpdateFeeConfig {
    type Error = carbon_core::error::Error;
    fn try_from(source: UpdateFeeConfigRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        lp_fee_basis_points: *source.lp_fee_basis_points,
                        protocol_fee_basis_points: *source.protocol_fee_basis_points,
                        protocol_fee_recipients: source.protocol_fee_recipients.into_iter().map(|element| *element).collect::<Vec<_>>().try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert array element to primitive".to_string()))?,
                        coin_creator_fee_basis_points: *source.coin_creator_fee_basis_points,
                        admin_set_coin_creator_authority: *source.admin_set_coin_creator_authority,
                    })
    }
}

impl carbon_core::postgres::operations::Table for UpdateFeeConfig {
    fn table() -> &'static str {
        "update_fee_config_instruction"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__signature",
            "__index",
            "__stack_height",
            "__slot",
                                    "lp_fee_basis_points",
                        "protocol_fee_basis_points",
                        "protocol_fee_recipients",
                        "coin_creator_fee_basis_points",
                        "admin_set_coin_creator_authority",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for UpdateFeeConfigRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO update_fee_config_instruction (
                            "lp_fee_basis_points",
                            "protocol_fee_basis_points",
                            "protocol_fee_recipients",
                            "coin_creator_fee_basis_points",
                            "admin_set_coin_creator_authority",
                                        __signature, __index, __stack_height, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7,                            $8,                            $9                    )"#)
                .bind(self.lp_fee_basis_points.clone())
                .bind(self.protocol_fee_basis_points.clone())
                .bind(self.protocol_fee_recipients.clone())
                .bind(self.coin_creator_fee_basis_points.clone())
                .bind(self.admin_set_coin_creator_authority.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for UpdateFeeConfigRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO update_fee_config_instruction (
                        "lp_fee_basis_points",
                        "protocol_fee_basis_points",
                        "protocol_fee_recipients",
                        "coin_creator_fee_basis_points",
                        "admin_set_coin_creator_authority",
                                    __signature, __index, __stack_height, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7,                        $8,                        $9                    ) ON CONFLICT (
                        __signature, __index
                    ) DO UPDATE SET
                        "lp_fee_basis_points" = EXCLUDED."lp_fee_basis_points",
                        "protocol_fee_basis_points" = EXCLUDED."protocol_fee_basis_points",
                        "protocol_fee_recipients" = EXCLUDED."protocol_fee_recipients",
                        "coin_creator_fee_basis_points" = EXCLUDED."coin_creator_fee_basis_points",
                        "admin_set_coin_creator_authority" = EXCLUDED."admin_set_coin_creator_authority",
                                    __index = EXCLUDED.__index,
            __stack_height = EXCLUDED.__stack_height,
            __slot = EXCLUDED.__slot
                    "#)
                .bind(self.lp_fee_basis_points.clone())
                .bind(self.protocol_fee_basis_points.clone())
                .bind(self.protocol_fee_recipients.clone())
                .bind(self.coin_creator_fee_basis_points.clone())
                .bind(self.admin_set_coin_creator_authority.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for UpdateFeeConfigRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM update_fee_config_instruction WHERE
                        __signature = $1 AND __index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for UpdateFeeConfigRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM update_fee_config_instruction WHERE
                        __signature = $1 AND __index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct UpdateFeeConfigMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for UpdateFeeConfigMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS update_fee_config_instruction (
                        -- Instruction data
                                    "lp_fee_basis_points" NUMERIC(20) NOT NULL,
                        "protocol_fee_basis_points" NUMERIC(20) NOT NULL,
                        "protocol_fee_recipients" BYTEA[] NOT NULL,
                        "coin_creator_fee_basis_points" NUMERIC(20) NOT NULL,
                        "admin_set_coin_creator_authority" BYTEA NOT NULL,
            
                        -- Instruction metadata
            __signature TEXT NOT NULL,
            __index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot BIGINT,
            
                        PRIMARY KEY (__signature, __index)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS update_fee_config_instruction"#).execute(connection).await?;
        Ok(())
    }
}

