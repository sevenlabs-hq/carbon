//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::instruction::InstructionMetadata;
use carbon_core::postgres::metadata::InstructionRowMetadata;
use carbon_core::postgres::primitives::U64;
use crate::instructions::SwapExactOut2;
use crate::types::RemainingAccountsInfo;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct SwapExactOut2Row {
    #[sqlx(flatten)]
        pub metadata: InstructionRowMetadata,
            pub max_in_amount: U64,
        pub out_amount: U64,
        pub remaining_accounts_info: sqlx::types::Json<RemainingAccountsInfo>,
}

impl SwapExactOut2Row {
    pub fn from_parts(source: SwapExactOut2, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        max_in_amount: source.max_in_amount.into(),
                        out_amount: source.out_amount.into(),
                        remaining_accounts_info: sqlx::types::Json(source.remaining_accounts_info.into()),
                    }
    }
}

impl TryFrom<SwapExactOut2Row> for SwapExactOut2 {
    type Error = carbon_core::error::Error;
    fn try_from(source: SwapExactOut2Row) -> Result<Self, Self::Error> {
        Ok(Self {
                        max_in_amount: *source.max_in_amount,
                        out_amount: *source.out_amount,
                        remaining_accounts_info: source.remaining_accounts_info.0,
                    })
    }
}

impl carbon_core::postgres::operations::Table for SwapExactOut2 {
    fn table() -> &'static str {
        "swap_exact_out2_instruction"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__signature",
            "__instruction_index",
            "__stack_height",
            "__slot",
                                    "max_in_amount",
                        "out_amount",
                        "remaining_accounts_info",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for SwapExactOut2Row {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO swap_exact_out2_instruction (
                            "max_in_amount",
                            "out_amount",
                            "remaining_accounts_info",
                                        __signature, __instruction_index, __stack_height, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7                    )"#)
                .bind(self.max_in_amount.clone())
                .bind(self.out_amount.clone())
                .bind(self.remaining_accounts_info.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for SwapExactOut2Row {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO swap_exact_out2_instruction (
                        "max_in_amount",
                        "out_amount",
                        "remaining_accounts_info",
                                    __signature, __instruction_index, __stack_height, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7                    ) ON CONFLICT (
                        __signature, __instruction_index
                    ) DO UPDATE SET
                        "max_in_amount" = EXCLUDED."max_in_amount",
                        "out_amount" = EXCLUDED."out_amount",
                        "remaining_accounts_info" = EXCLUDED."remaining_accounts_info",
                                    __instruction_index = EXCLUDED.__instruction_index,
            __stack_height = EXCLUDED.__stack_height,
            __slot = EXCLUDED.__slot
                    "#)
                .bind(self.max_in_amount.clone())
                .bind(self.out_amount.clone())
                .bind(self.remaining_accounts_info.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for SwapExactOut2Row {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM swap_exact_out2_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for SwapExactOut2Row {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM swap_exact_out2_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct SwapExactOut2MigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for SwapExactOut2MigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS swap_exact_out2_instruction (
                        -- Instruction data
                                    "max_in_amount" NUMERIC(20) NOT NULL,
                        "out_amount" NUMERIC(20) NOT NULL,
                        "remaining_accounts_info" JSONB NOT NULL,
            
                        -- Instruction metadata
            __signature TEXT NOT NULL,
            __instruction_index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__signature, __instruction_index)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS swap_exact_out2_instruction"#).execute(connection).await?;
        Ok(())
    }
}

