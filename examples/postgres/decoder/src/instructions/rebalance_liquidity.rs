//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;
use crate::types::AddLiquidityParams;
use crate::types::RemainingAccountsInfo;
use crate::types::RemoveLiquidityParams;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct RebalanceLiquidity {
    /// active id
    pub active_id: i32,
    /// max active bin slippage allowed
    pub max_active_bin_slippage: u16,
    /// a flag to indicate that whether fee should be harvested
    pub should_claim_fee: bool,
    /// a flag to indicate that whether rewards should be harvested
    pub should_claim_reward: bool,
    /// threshold for withdraw token x
    pub min_withdraw_x_amount: u64,
    /// threshold for deposit token x
    pub max_deposit_x_amount: u64,
    /// threshold for withdraw token y
    pub min_withdraw_y_amount: u64,
    /// threshold for deposit token y
    pub max_deposit_y_amount: u64,
    /// padding 32 bytes for future usage
    pub padding: Vec<u8>,
    /// removes
    pub removes: Vec<RemoveLiquidityParams>,
    /// adds
    pub adds: Vec<AddLiquidityParams>,
        pub remaining_accounts_info: RemainingAccountsInfo,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RebalanceLiquidityInstructionAccounts {
    pub position: solana_pubkey::Pubkey,
    pub lb_pair: solana_pubkey::Pubkey,
    pub bin_array_bitmap_extension: Option<solana_pubkey::Pubkey>,
    pub user_token_x: solana_pubkey::Pubkey,
    pub user_token_y: solana_pubkey::Pubkey,
    pub reserve_x: solana_pubkey::Pubkey,
    pub reserve_y: solana_pubkey::Pubkey,
    pub token_x_mint: solana_pubkey::Pubkey,
    pub token_y_mint: solana_pubkey::Pubkey,
    pub owner: solana_pubkey::Pubkey,
    pub rent_payer: solana_pubkey::Pubkey,
    pub token_x_program: solana_pubkey::Pubkey,
    pub token_y_program: solana_pubkey::Pubkey,
    pub memo_program: solana_pubkey::Pubkey,
    pub system_program: solana_pubkey::Pubkey,
    pub event_authority: solana_pubkey::Pubkey,
    pub program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl RebalanceLiquidity {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[92, 4, 176, 193, 119, 185, 83, 9] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for RebalanceLiquidity {
    type ArrangedAccounts = RebalanceLiquidityInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let position = next_account(&mut iter)?;
                let lb_pair = next_account(&mut iter)?;
                let bin_array_bitmap_extension = next_account(&mut iter);
                let user_token_x = next_account(&mut iter)?;
                let user_token_y = next_account(&mut iter)?;
                let reserve_x = next_account(&mut iter)?;
                let reserve_y = next_account(&mut iter)?;
                let token_x_mint = next_account(&mut iter)?;
                let token_y_mint = next_account(&mut iter)?;
                let owner = next_account(&mut iter)?;
                let rent_payer = next_account(&mut iter)?;
                let token_x_program = next_account(&mut iter)?;
                let token_y_program = next_account(&mut iter)?;
                let memo_program = next_account(&mut iter)?;
                let system_program = next_account(&mut iter)?;
                let event_authority = next_account(&mut iter)?;
                let program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(RebalanceLiquidityInstructionAccounts {
                        position: position,
                        lb_pair: lb_pair,
                        bin_array_bitmap_extension: bin_array_bitmap_extension,
                        user_token_x: user_token_x,
                        user_token_y: user_token_y,
                        reserve_x: reserve_x,
                        reserve_y: reserve_y,
                        token_x_mint: token_x_mint,
                        token_y_mint: token_y_mint,
                        owner: owner,
                        rent_payer: rent_payer,
                        token_x_program: token_x_program,
                        token_y_program: token_y_program,
                        memo_program: memo_program,
                        system_program: system_program,
                        event_authority: event_authority,
                        program: program,
                        remaining: remaining.to_vec(),
        })
            }
}

