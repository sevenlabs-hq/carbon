//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct InitializeBinArray {
        pub index: i64,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeBinArrayInstructionAccounts {
    pub lb_pair: solana_pubkey::Pubkey,
    pub bin_array: solana_pubkey::Pubkey,
    pub funder: solana_pubkey::Pubkey,
    pub system_program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl InitializeBinArray {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[35, 86, 19, 185, 78, 212, 75, 211] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for InitializeBinArray {
    type ArrangedAccounts = InitializeBinArrayInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let lb_pair = next_account(&mut iter)?;
                let bin_array = next_account(&mut iter)?;
                let funder = next_account(&mut iter)?;
                let system_program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(InitializeBinArrayInstructionAccounts {
                        lb_pair: lb_pair,
                        bin_array: bin_array,
                        funder: funder,
                        system_program: system_program,
                        remaining: remaining.to_vec(),
        })
            }
}

