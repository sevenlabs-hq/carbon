//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;
use crate::types::RemainingAccountsInfo;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct ClaimReward2 {
        pub reward_index: u64,
        pub min_bin_id: i32,
        pub max_bin_id: i32,
        pub remaining_accounts_info: RemainingAccountsInfo,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimReward2InstructionAccounts {
    pub lb_pair: solana_pubkey::Pubkey,
    pub position: solana_pubkey::Pubkey,
    pub sender: solana_pubkey::Pubkey,
    pub reward_vault: solana_pubkey::Pubkey,
    pub reward_mint: solana_pubkey::Pubkey,
    pub user_token_account: solana_pubkey::Pubkey,
    pub token_program: solana_pubkey::Pubkey,
    pub memo_program: solana_pubkey::Pubkey,
    pub event_authority: solana_pubkey::Pubkey,
    pub program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl ClaimReward2 {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[190, 3, 127, 119, 178, 87, 157, 183] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for ClaimReward2 {
    type ArrangedAccounts = ClaimReward2InstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let lb_pair = next_account(&mut iter)?;
                let position = next_account(&mut iter)?;
                let sender = next_account(&mut iter)?;
                let reward_vault = next_account(&mut iter)?;
                let reward_mint = next_account(&mut iter)?;
                let user_token_account = next_account(&mut iter)?;
                let token_program = next_account(&mut iter)?;
                let memo_program = next_account(&mut iter)?;
                let event_authority = next_account(&mut iter)?;
                let program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(ClaimReward2InstructionAccounts {
                        lb_pair: lb_pair,
                        position: position,
                        sender: sender,
                        reward_vault: reward_vault,
                        reward_mint: reward_mint,
                        user_token_account: user_token_account,
                        token_program: token_program,
                        memo_program: memo_program,
                        event_authority: event_authority,
                        program: program,
                        remaining: remaining.to_vec(),
        })
            }
}

