//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{PROGRAM_ID, LbClmmDecoder};

#[cfg(feature = "postgres")]
pub mod postgres;

#[cfg(feature = "graphql")]
pub mod graphql;

pub mod bin_array;
pub mod bin_array_bitmap_extension;
pub mod claim_fee_operator;
pub mod dummy_zc_account;
pub mod lb_pair;
pub mod oracle;
pub mod position;
pub mod position_v2;
pub mod preset_parameter;
pub mod preset_parameter2;
pub mod token_badge;

pub use self::bin_array::*;
pub use self::bin_array_bitmap_extension::*;
pub use self::claim_fee_operator::*;
pub use self::dummy_zc_account::*;
pub use self::lb_pair::*;
pub use self::oracle::*;
pub use self::position::*;
pub use self::position_v2::*;
pub use self::preset_parameter::*;
pub use self::preset_parameter2::*;
pub use self::token_badge::*;

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(tag = "type", content = "data"))]
pub enum LbClmmAccount {
    BinArray(BinArray),
    BinArrayBitmapExtension(BinArrayBitmapExtension),
    ClaimFeeOperator(ClaimFeeOperator),
    DummyZcAccount(DummyZcAccount),
    LbPair(LbPair),
    Oracle(Oracle),
    Position(Position),
    PositionV2(PositionV2),
    PresetParameter(PresetParameter),
    PresetParameter2(PresetParameter2),
    TokenBadge(TokenBadge),
}

impl<'a> carbon_core::account::AccountDecoder<'a> for LbClmmDecoder {
    type AccountType = LbClmmAccount;
    
    fn decode_account(
        &self,
        account: &'a solana_account::Account,
    ) -> Option<carbon_core::account::DecodedAccount<Self::AccountType>> {
        if account.owner != PROGRAM_ID {
            return None;
        }
        
        let data = account.data.as_slice();
        
                // Try to decode BinArray
        {
            if let Some(decoded) = bin_array::BinArray::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::BinArray(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode BinArrayBitmapExtension
        {
            if let Some(decoded) = bin_array_bitmap_extension::BinArrayBitmapExtension::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::BinArrayBitmapExtension(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode ClaimFeeOperator
        {
            if let Some(decoded) = claim_fee_operator::ClaimFeeOperator::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::ClaimFeeOperator(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode DummyZcAccount
        {
            if let Some(decoded) = dummy_zc_account::DummyZcAccount::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::DummyZcAccount(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode LbPair
        {
            if let Some(decoded) = lb_pair::LbPair::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::LbPair(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode Oracle
        {
            if let Some(decoded) = oracle::Oracle::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::Oracle(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode Position
        {
            if let Some(decoded) = position::Position::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::Position(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode PositionV2
        {
            if let Some(decoded) = position_v2::PositionV2::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::PositionV2(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode PresetParameter
        {
            if let Some(decoded) = preset_parameter::PresetParameter::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::PresetParameter(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode PresetParameter2
        {
            if let Some(decoded) = preset_parameter2::PresetParameter2::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::PresetParameter2(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode TokenBadge
        {
            if let Some(decoded) = token_badge::TokenBadge::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: LbClmmAccount::TokenBadge(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                
        None
    }
}

