//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::borsh::{self, BorshDeserialize};
use crate::types::ProtocolFee;
use crate::types::RewardInfo;
use crate::types::StaticParameters;
use crate::types::VariableParameters;
use solana_pubkey::Pubkey;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct LbPair {
pub parameters: StaticParameters,
pub v_parameters: VariableParameters,
pub bump_seed: Vec<u8>,
pub bin_step_seed: Vec<u8>,
pub pair_type: u8,
pub active_id: i32,
pub bin_step: u16,
pub status: u8,
pub require_base_factor_seed: u8,
pub base_factor_seed: Vec<u8>,
pub activation_type: u8,
pub creator_pool_on_off_control: u8,
pub token_x_mint: Pubkey,
pub token_y_mint: Pubkey,
pub reserve_x: Pubkey,
pub reserve_y: Pubkey,
pub protocol_fee: ProtocolFee,
pub padding1: Vec<u8>,
pub reward_infos: [RewardInfo; 2],
pub oracle: Pubkey,
pub bin_array_bitmap: [u64; 16],
pub last_updated_at: i64,
pub padding2: Vec<u8>,
pub pre_activation_swap_address: Pubkey,
pub base_key: Pubkey,
pub activation_point: u64,
pub pre_activation_duration: u64,
pub padding3: Vec<u8>,
pub padding4: u64,
pub creator: Pubkey,
pub token_mint_x_program_flag: u8,
pub token_mint_y_program_flag: u8,
pub reserved: Vec<u8>,
}

impl LbPair {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[33, 11, 49, 98, 181, 101, 177, 13] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

