//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::borsh::{self, BorshDeserialize};
use crate::types::FeeInfo;
use crate::types::UserRewardInfo;
use solana_pubkey::Pubkey;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct Position {
pub lb_pair: Pubkey,
pub owner: Pubkey,
#[serde(with = "serde_big_array::BigArray")] pub liquidity_shares: [u64; 70],
#[serde(with = "serde_big_array::BigArray")] pub reward_infos: [UserRewardInfo; 70],
#[serde(with = "serde_big_array::BigArray")] pub fee_infos: [FeeInfo; 70],
pub lower_bin_id: i32,
pub upper_bin_id: i32,
pub last_updated_at: i64,
pub total_claimed_fee_x_amount: u64,
pub total_claimed_fee_y_amount: u64,
pub total_claimed_rewards: [u64; 2],
pub reserved: Vec<u8>,
}

impl Position {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[170, 188, 143, 228, 122, 64, 247, 208] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

