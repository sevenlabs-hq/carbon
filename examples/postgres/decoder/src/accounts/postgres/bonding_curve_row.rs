//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::accounts::BondingCurve;
use carbon_core::account::AccountMetadata;
use carbon_core::postgres::metadata::AccountRowMetadata;
use carbon_core::postgres::primitives::Pubkey;
use carbon_core::postgres::primitives::U64;

#[derive(sqlx::FromRow, Debug, Clone)]
pub struct BondingCurveRow {
    #[sqlx(flatten)]
    pub metadata: AccountRowMetadata,
    pub virtual_token_reserves: U64,
    pub virtual_sol_reserves: U64,
    pub real_token_reserves: U64,
    pub real_sol_reserves: U64,
    pub token_total_supply: U64,
    pub complete: bool,
    pub creator: Pubkey,
}

impl BondingCurveRow {
    pub fn from_parts(source: BondingCurve, metadata: AccountMetadata) -> Self {
        Self {
            metadata: metadata.into(),
            virtual_token_reserves: source.virtual_token_reserves.into(),
            virtual_sol_reserves: source.virtual_sol_reserves.into(),
            real_token_reserves: source.real_token_reserves.into(),
            real_sol_reserves: source.real_sol_reserves.into(),
            token_total_supply: source.token_total_supply.into(),
            complete: source.complete.into(),
            creator: source.creator.into(),
        }
    }
}

impl TryFrom<BondingCurveRow> for BondingCurve {
    type Error = carbon_core::error::Error;
    fn try_from(source: BondingCurveRow) -> Result<Self, Self::Error> {
        Ok(Self {
            virtual_token_reserves: *source.virtual_token_reserves,
            virtual_sol_reserves: *source.virtual_sol_reserves,
            real_token_reserves: *source.real_token_reserves,
            real_sol_reserves: *source.real_sol_reserves,
            token_total_supply: *source.token_total_supply,
            complete: source.complete.into(),
            creator: *source.creator,
        })
    }
}

impl carbon_core::postgres::operations::Table for BondingCurve {
    fn table() -> &'static str {
        "bonding_curve_account"
    }

    fn columns() -> Vec<&'static str> {
        vec![
            "__pubkey",
            "__slot",
            "virtual_token_reserves",
            "virtual_sol_reserves",
            "real_token_reserves",
            "real_sol_reserves",
            "token_total_supply",
            "complete",
            "creator",
        ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for BondingCurveRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO bonding_curve_account (
                            "virtual_token_reserves",
                            "virtual_sol_reserves",
                            "real_token_reserves",
                            "real_sol_reserves",
                            "token_total_supply",
                            "complete",
                            "creator",
                                        __pubkey, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7,                            $8,                            $9                    )"#)
                .bind(self.virtual_token_reserves.clone())
                .bind(self.virtual_sol_reserves.clone())
                .bind(self.real_token_reserves.clone())
                .bind(self.real_sol_reserves.clone())
                .bind(self.token_total_supply.clone())
                .bind(self.complete.clone())
                .bind(self.creator.clone())
                        .bind(self.metadata.pubkey.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for BondingCurveRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO bonding_curve_account (
                        "virtual_token_reserves",
                        "virtual_sol_reserves",
                        "real_token_reserves",
                        "real_sol_reserves",
                        "token_total_supply",
                        "complete",
                        "creator",
                                    __pubkey, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7,                        $8,                        $9                    ) ON CONFLICT (
                        __pubkey
                    ) DO UPDATE SET
                        "virtual_token_reserves" = EXCLUDED."virtual_token_reserves",
                        "virtual_sol_reserves" = EXCLUDED."virtual_sol_reserves",
                        "real_token_reserves" = EXCLUDED."real_token_reserves",
                        "real_sol_reserves" = EXCLUDED."real_sol_reserves",
                        "token_total_supply" = EXCLUDED."token_total_supply",
                        "complete" = EXCLUDED."complete",
                        "creator" = EXCLUDED."creator",
                                    __slot = EXCLUDED.__slot
                    "#)
                .bind(self.virtual_token_reserves.clone())
                .bind(self.virtual_sol_reserves.clone())
                .bind(self.real_token_reserves.clone())
                .bind(self.real_sol_reserves.clone())
                .bind(self.token_total_supply.clone())
                .bind(self.complete.clone())
                .bind(self.creator.clone())
                        .bind(self.metadata.pubkey)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for BondingCurveRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(
            r#"DELETE FROM bonding_curve_account WHERE
                        __pubkey = $1
                    "#,
        )
        .bind(key)
        .execute(pool)
        .await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for BondingCurveRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn lookup(
        key: Self::Key,
        pool: &sqlx::PgPool,
    ) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(
            r#"SELECT * FROM bonding_curve_account WHERE
                        __pubkey = $1
                    "#,
        )
        .bind(key)
        .fetch_optional(pool)
        .await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(row)
    }
}

pub struct BondingCurveMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for BondingCurveMigrationOperation {
    async fn up(
        &self,
        connection: &mut sqlx::PgConnection,
    ) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(
            r#"CREATE TABLE IF NOT EXISTS bonding_curve_account (
                        -- Account data
                                    "virtual_token_reserves" NUMERIC(20) NOT NULL,
                        "virtual_sol_reserves" NUMERIC(20) NOT NULL,
                        "real_token_reserves" NUMERIC(20) NOT NULL,
                        "real_sol_reserves" NUMERIC(20) NOT NULL,
                        "token_total_supply" NUMERIC(20) NOT NULL,
                        "complete" BOOLEAN NOT NULL,
                        "creator" BYTEA NOT NULL,
            
                        -- Account metadata
            __pubkey BYTEA NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__pubkey)
                    )"#,
        )
        .execute(connection)
        .await?;
        Ok(())
    }

    async fn down(
        &self,
        connection: &mut sqlx::PgConnection,
    ) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS bonding_curve_account"#)
            .execute(connection)
            .await?;
        Ok(())
    }
}
