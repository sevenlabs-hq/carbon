//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account::AccountMetadata;
use carbon_core::postgres::metadata::AccountRowMetadata;
use carbon_core::postgres::primitives::Pubkey;
use carbon_core::postgres::primitives::U64;
use crate::accounts::UserVolumeAccumulator;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct UserVolumeAccumulatorRow {
    #[sqlx(flatten)]
        pub metadata: AccountRowMetadata,
            pub user: Pubkey,
        pub needs_claim: bool,
        pub total_unclaimed_tokens: U64,
        pub total_claimed_tokens: U64,
        pub current_sol_volume: U64,
        pub last_update_timestamp: i64,
        pub has_total_claimed_tokens: bool,
}

impl UserVolumeAccumulatorRow {
    pub fn from_parts(source: UserVolumeAccumulator, metadata: AccountMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        user: source.user.into(),
                        needs_claim: source.needs_claim.into(),
                        total_unclaimed_tokens: source.total_unclaimed_tokens.into(),
                        total_claimed_tokens: source.total_claimed_tokens.into(),
                        current_sol_volume: source.current_sol_volume.into(),
                        last_update_timestamp: source.last_update_timestamp.into(),
                        has_total_claimed_tokens: source.has_total_claimed_tokens.into(),
                    }
    }
}

impl TryFrom<UserVolumeAccumulatorRow> for UserVolumeAccumulator {
    type Error = carbon_core::error::Error;
    fn try_from(source: UserVolumeAccumulatorRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        user: *source.user,
                        needs_claim: source.needs_claim.into(),
                        total_unclaimed_tokens: *source.total_unclaimed_tokens,
                        total_claimed_tokens: *source.total_claimed_tokens,
                        current_sol_volume: *source.current_sol_volume,
                        last_update_timestamp: source.last_update_timestamp.into(),
                        has_total_claimed_tokens: source.has_total_claimed_tokens.into(),
                    })
    }
}

impl carbon_core::postgres::operations::Table for UserVolumeAccumulator {
    fn table() -> &'static str {
        "user_volume_accumulator_account"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__pubkey",
            "__slot",
                                    "user",
                        "needs_claim",
                        "total_unclaimed_tokens",
                        "total_claimed_tokens",
                        "current_sol_volume",
                        "last_update_timestamp",
                        "has_total_claimed_tokens",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for UserVolumeAccumulatorRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO user_volume_accumulator_account (
                            "user",
                            "needs_claim",
                            "total_unclaimed_tokens",
                            "total_claimed_tokens",
                            "current_sol_volume",
                            "last_update_timestamp",
                            "has_total_claimed_tokens",
                                        __pubkey, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7,                            $8,                            $9                    )"#)
                .bind(self.user.clone())
                .bind(self.needs_claim.clone())
                .bind(self.total_unclaimed_tokens.clone())
                .bind(self.total_claimed_tokens.clone())
                .bind(self.current_sol_volume.clone())
                .bind(self.last_update_timestamp.clone())
                .bind(self.has_total_claimed_tokens.clone())
                        .bind(self.metadata.pubkey.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for UserVolumeAccumulatorRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO user_volume_accumulator_account (
                        "user",
                        "needs_claim",
                        "total_unclaimed_tokens",
                        "total_claimed_tokens",
                        "current_sol_volume",
                        "last_update_timestamp",
                        "has_total_claimed_tokens",
                                    __pubkey, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7,                        $8,                        $9                    ) ON CONFLICT (
                        __pubkey
                    ) DO UPDATE SET
                        "user" = EXCLUDED."user",
                        "needs_claim" = EXCLUDED."needs_claim",
                        "total_unclaimed_tokens" = EXCLUDED."total_unclaimed_tokens",
                        "total_claimed_tokens" = EXCLUDED."total_claimed_tokens",
                        "current_sol_volume" = EXCLUDED."current_sol_volume",
                        "last_update_timestamp" = EXCLUDED."last_update_timestamp",
                        "has_total_claimed_tokens" = EXCLUDED."has_total_claimed_tokens",
                                    __slot = EXCLUDED.__slot
                    "#)
                .bind(self.user.clone())
                .bind(self.needs_claim.clone())
                .bind(self.total_unclaimed_tokens.clone())
                .bind(self.total_claimed_tokens.clone())
                .bind(self.current_sol_volume.clone())
                .bind(self.last_update_timestamp.clone())
                .bind(self.has_total_claimed_tokens.clone())
                        .bind(self.metadata.pubkey)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for UserVolumeAccumulatorRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM user_volume_accumulator_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for UserVolumeAccumulatorRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM user_volume_accumulator_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct UserVolumeAccumulatorMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for UserVolumeAccumulatorMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS user_volume_accumulator_account (
                        -- Account data
                                    "user" BYTEA NOT NULL,
                        "needs_claim" BOOLEAN NOT NULL,
                        "total_unclaimed_tokens" NUMERIC(20) NOT NULL,
                        "total_claimed_tokens" NUMERIC(20) NOT NULL,
                        "current_sol_volume" NUMERIC(20) NOT NULL,
                        "last_update_timestamp" INT8 NOT NULL,
                        "has_total_claimed_tokens" BOOLEAN NOT NULL,
            
                        -- Account metadata
            __pubkey BYTEA NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__pubkey)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS user_volume_accumulator_account"#).execute(connection).await?;
        Ok(())
    }
}

