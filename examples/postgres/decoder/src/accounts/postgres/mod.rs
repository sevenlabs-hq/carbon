//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

pub mod bonding_curve_row;
pub mod fee_config_row;
pub mod global_config_row;
pub mod global_volume_accumulator_row;
pub mod pool_row;
pub mod user_volume_accumulator_row;

pub use self::bonding_curve_row::*;
pub use self::fee_config_row::*;
pub use self::global_config_row::*;
pub use self::global_volume_accumulator_row::*;
pub use self::pool_row::*;
pub use self::user_volume_accumulator_row::*;

use super::PumpAmmAccount;

pub struct PumpAmmAccountsMigration;

impl sqlx_migrator::Migration<sqlx::Postgres> for PumpAmmAccountsMigration {
    fn app(&self) -> &str {
        "pump-amm"
    }

    fn name(&self) -> &str {
        "pump_amm_accounts"
    }

    fn operations(&self) -> Vec<Box<dyn sqlx_migrator::Operation<sqlx::Postgres>>> {
        vec![
                        Box::new(BondingCurveMigrationOperation),
                        Box::new(FeeConfigMigrationOperation),
                        Box::new(GlobalConfigMigrationOperation),
                        Box::new(GlobalVolumeAccumulatorMigrationOperation),
                        Box::new(PoolMigrationOperation),
                        Box::new(UserVolumeAccumulatorMigrationOperation),
                    ]
    }

    fn parents(&self) -> Vec<Box<dyn sqlx_migrator::Migration<sqlx::Postgres>>> {
        vec![]
    }
}

pub struct PumpAmmAccountWithMetadata(pub PumpAmmAccount, pub carbon_core::account::AccountMetadata);

impl From<(PumpAmmAccount, carbon_core::account::AccountMetadata)> for PumpAmmAccountWithMetadata {
    fn from(value: (PumpAmmAccount, carbon_core::account::AccountMetadata)) -> Self {
        PumpAmmAccountWithMetadata(value.0, value.1)
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for PumpAmmAccountWithMetadata {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        let PumpAmmAccountWithMetadata(account, metadata) = self;

        match account {
                        PumpAmmAccount::BondingCurve(account) => {
                let row = bonding_curve_row::BondingCurveRow::from_parts(account.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::FeeConfig(account) => {
                let row = fee_config_row::FeeConfigRow::from_parts(account.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::GlobalConfig(account) => {
                let row = global_config_row::GlobalConfigRow::from_parts(account.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::GlobalVolumeAccumulator(account) => {
                let row = global_volume_accumulator_row::GlobalVolumeAccumulatorRow::from_parts(account.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::Pool(account) => {
                let row = pool_row::PoolRow::from_parts(account.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::UserVolumeAccumulator(account) => {
                let row = user_volume_accumulator_row::UserVolumeAccumulatorRow::from_parts(account.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                    }
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for PumpAmmAccountWithMetadata {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        let PumpAmmAccountWithMetadata(account, metadata) = self;
        match account {
                        PumpAmmAccount::BondingCurve(account) => {
                let row = bonding_curve_row::BondingCurveRow::from_parts(account.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::FeeConfig(account) => {
                let row = fee_config_row::FeeConfigRow::from_parts(account.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::GlobalConfig(account) => {
                let row = global_config_row::GlobalConfigRow::from_parts(account.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::GlobalVolumeAccumulator(account) => {
                let row = global_volume_accumulator_row::GlobalVolumeAccumulatorRow::from_parts(account.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::Pool(account) => {
                let row = pool_row::PoolRow::from_parts(account.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        PumpAmmAccount::UserVolumeAccumulator(account) => {
                let row = user_volume_accumulator_row::UserVolumeAccumulatorRow::from_parts(account.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                    }
    }
}

