//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account::AccountMetadata;
use carbon_core::postgres::metadata::AccountRowMetadata;
use crate::accounts::DummyZcAccount;
use crate::types::PositionBinData;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct DummyZcAccountRow {
    #[sqlx(flatten)]
        pub metadata: AccountRowMetadata,
            pub position_bin_data: sqlx::types::Json<PositionBinData>,
}

impl DummyZcAccountRow {
    pub fn from_parts(source: DummyZcAccount, metadata: AccountMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        position_bin_data: sqlx::types::Json(source.position_bin_data.into()),
                    }
    }
}

impl TryFrom<DummyZcAccountRow> for DummyZcAccount {
    type Error = carbon_core::error::Error;
    fn try_from(source: DummyZcAccountRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        position_bin_data: source.position_bin_data.0,
                    })
    }
}

impl carbon_core::postgres::operations::Table for DummyZcAccount {
    fn table() -> &'static str {
        "dummy_zc_account_account"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__pubkey",
            "__slot",
                                    "position_bin_data",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for DummyZcAccountRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO dummy_zc_account_account (
                            "position_bin_data",
                                        __pubkey, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3                    )"#)
                .bind(self.position_bin_data.clone())
                        .bind(self.metadata.pubkey.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for DummyZcAccountRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO dummy_zc_account_account (
                        "position_bin_data",
                                    __pubkey, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3                    ) ON CONFLICT (
                        __pubkey
                    ) DO UPDATE SET
                        "position_bin_data" = EXCLUDED."position_bin_data",
                                    __slot = EXCLUDED.__slot
                    "#)
                .bind(self.position_bin_data.clone())
                        .bind(self.metadata.pubkey)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for DummyZcAccountRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM dummy_zc_account_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for DummyZcAccountRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM dummy_zc_account_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct DummyZcAccountMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for DummyZcAccountMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS dummy_zc_account_account (
                        -- Account data
                                    "position_bin_data" JSONB NOT NULL,
            
                        -- Account metadata
            __pubkey BYTEA NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__pubkey)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS dummy_zc_account_account"#).execute(connection).await?;
        Ok(())
    }
}

