//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account::AccountMetadata;
use carbon_core::postgres::metadata::AccountRowMetadata;
use carbon_core::postgres::primitives::U16;
use carbon_core::postgres::primitives::U32;
use carbon_core::postgres::primitives::U64;
use carbon_core::postgres::primitives::U8;
use crate::accounts::PresetParameter2;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct PresetParameter2Row {
    #[sqlx(flatten)]
        pub metadata: AccountRowMetadata,
            pub bin_step: U16,
        pub base_factor: U16,
        pub filter_period: U16,
        pub decay_period: U16,
        pub variable_fee_control: U32,
        pub max_volatility_accumulator: U32,
        pub reduction_factor: U16,
        pub protocol_share: U16,
        pub index: U16,
        pub base_fee_power_factor: U8,
        pub padding0: U8,
        pub padding1: Vec<U64>,
}

impl PresetParameter2Row {
    pub fn from_parts(source: PresetParameter2, metadata: AccountMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        bin_step: source.bin_step.into(),
                        base_factor: source.base_factor.into(),
                        filter_period: source.filter_period.into(),
                        decay_period: source.decay_period.into(),
                        variable_fee_control: source.variable_fee_control.into(),
                        max_volatility_accumulator: source.max_volatility_accumulator.into(),
                        reduction_factor: source.reduction_factor.into(),
                        protocol_share: source.protocol_share.into(),
                        index: source.index.into(),
                        base_fee_power_factor: source.base_fee_power_factor.into(),
                        padding0: source.padding0.into(),
                        padding1: source.padding1.into_iter().map(|element| element.into()).collect(),
                    }
    }
}

impl TryFrom<PresetParameter2Row> for PresetParameter2 {
    type Error = carbon_core::error::Error;
    fn try_from(source: PresetParameter2Row) -> Result<Self, Self::Error> {
        Ok(Self {
                        bin_step: source.bin_step.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        base_factor: source.base_factor.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        filter_period: source.filter_period.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        decay_period: source.decay_period.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        variable_fee_control: source.variable_fee_control.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        max_volatility_accumulator: source.max_volatility_accumulator.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        reduction_factor: source.reduction_factor.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        protocol_share: source.protocol_share.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        index: source.index.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        base_fee_power_factor: source.base_fee_power_factor.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        padding0: source.padding0.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        padding1: source.padding1.into_iter().map(|element| Ok(*element)).collect::<Result<Vec<_>, _>>()?.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert array element to primitive".to_string()))?,
                    })
    }
}

impl carbon_core::postgres::operations::Table for PresetParameter2 {
    fn table() -> &'static str {
        "preset_parameter2_account"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__pubkey",
            "__slot",
                                    "bin_step",
                        "base_factor",
                        "filter_period",
                        "decay_period",
                        "variable_fee_control",
                        "max_volatility_accumulator",
                        "reduction_factor",
                        "protocol_share",
                        "index",
                        "base_fee_power_factor",
                        "padding0",
                        "padding1",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for PresetParameter2Row {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO preset_parameter2_account (
                            "bin_step",
                            "base_factor",
                            "filter_period",
                            "decay_period",
                            "variable_fee_control",
                            "max_volatility_accumulator",
                            "reduction_factor",
                            "protocol_share",
                            "index",
                            "base_fee_power_factor",
                            "padding0",
                            "padding1",
                                        __pubkey, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7,                            $8,                            $9,                            $10,                            $11,                            $12,                            $13,                            $14                    )"#)
                .bind(self.bin_step.clone())
                .bind(self.base_factor.clone())
                .bind(self.filter_period.clone())
                .bind(self.decay_period.clone())
                .bind(self.variable_fee_control.clone())
                .bind(self.max_volatility_accumulator.clone())
                .bind(self.reduction_factor.clone())
                .bind(self.protocol_share.clone())
                .bind(self.index.clone())
                .bind(self.base_fee_power_factor.clone())
                .bind(self.padding0.clone())
                .bind(self.padding1.clone())
                        .bind(self.metadata.pubkey.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for PresetParameter2Row {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO preset_parameter2_account (
                        "bin_step",
                        "base_factor",
                        "filter_period",
                        "decay_period",
                        "variable_fee_control",
                        "max_volatility_accumulator",
                        "reduction_factor",
                        "protocol_share",
                        "index",
                        "base_fee_power_factor",
                        "padding0",
                        "padding1",
                                    __pubkey, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7,                        $8,                        $9,                        $10,                        $11,                        $12,                        $13,                        $14                    ) ON CONFLICT (
                        __pubkey
                    ) DO UPDATE SET
                        "bin_step" = EXCLUDED."bin_step",
                        "base_factor" = EXCLUDED."base_factor",
                        "filter_period" = EXCLUDED."filter_period",
                        "decay_period" = EXCLUDED."decay_period",
                        "variable_fee_control" = EXCLUDED."variable_fee_control",
                        "max_volatility_accumulator" = EXCLUDED."max_volatility_accumulator",
                        "reduction_factor" = EXCLUDED."reduction_factor",
                        "protocol_share" = EXCLUDED."protocol_share",
                        "index" = EXCLUDED."index",
                        "base_fee_power_factor" = EXCLUDED."base_fee_power_factor",
                        "padding0" = EXCLUDED."padding0",
                        "padding1" = EXCLUDED."padding1",
                                    __slot = EXCLUDED.__slot
                    "#)
                .bind(self.bin_step.clone())
                .bind(self.base_factor.clone())
                .bind(self.filter_period.clone())
                .bind(self.decay_period.clone())
                .bind(self.variable_fee_control.clone())
                .bind(self.max_volatility_accumulator.clone())
                .bind(self.reduction_factor.clone())
                .bind(self.protocol_share.clone())
                .bind(self.index.clone())
                .bind(self.base_fee_power_factor.clone())
                .bind(self.padding0.clone())
                .bind(self.padding1.clone())
                        .bind(self.metadata.pubkey)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for PresetParameter2Row {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM preset_parameter2_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for PresetParameter2Row {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM preset_parameter2_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct PresetParameter2MigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for PresetParameter2MigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS preset_parameter2_account (
                        -- Account data
                                    "bin_step" INT4 NOT NULL,
                        "base_factor" INT4 NOT NULL,
                        "filter_period" INT4 NOT NULL,
                        "decay_period" INT4 NOT NULL,
                        "variable_fee_control" INT8 NOT NULL,
                        "max_volatility_accumulator" INT8 NOT NULL,
                        "reduction_factor" INT4 NOT NULL,
                        "protocol_share" INT4 NOT NULL,
                        "index" INT4 NOT NULL,
                        "base_fee_power_factor" INT2 NOT NULL,
                        "padding0" INT2 NOT NULL,
                        "padding1" NUMERIC(20)[] NOT NULL,
            
                        -- Account metadata
            __pubkey BYTEA NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__pubkey)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS preset_parameter2_account"#).execute(connection).await?;
        Ok(())
    }
}

