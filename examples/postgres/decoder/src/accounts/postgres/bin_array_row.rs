//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account::AccountMetadata;
use carbon_core::postgres::metadata::AccountRowMetadata;
use carbon_core::postgres::primitives::Pubkey;
use carbon_core::postgres::primitives::U8;
use crate::accounts::BinArray;
use crate::types::Bin;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct BinArrayRow {
    #[sqlx(flatten)]
        pub metadata: AccountRowMetadata,
            pub index: i64,
        pub version: U8,
        pub padding: Vec<u8>,
        pub lb_pair: Pubkey,
        pub bins: sqlx::types::Json<Vec<Bin>>,
}

impl BinArrayRow {
    pub fn from_parts(source: BinArray, metadata: AccountMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        index: source.index.into(),
                        version: source.version.into(),
                        padding: source.padding.into(),
                        lb_pair: source.lb_pair.into(),
                        bins: sqlx::types::Json(source.bins.into_iter().map(|element| element.into()).collect()),
                    }
    }
}

impl TryFrom<BinArrayRow> for BinArray {
    type Error = carbon_core::error::Error;
    fn try_from(source: BinArrayRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        index: source.index.into(),
                        version: source.version.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        padding: source.padding.into(),
                        lb_pair: *source.lb_pair,
                        bins: source.bins.0.into_iter().collect::<Vec<_>>().try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                    })
    }
}

impl carbon_core::postgres::operations::Table for BinArray {
    fn table() -> &'static str {
        "bin_array_account"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__pubkey",
            "__slot",
                                    "index",
                        "version",
                        "padding",
                        "lb_pair",
                        "bins",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for BinArrayRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO bin_array_account (
                            "index",
                            "version",
                            "padding",
                            "lb_pair",
                            "bins",
                                        __pubkey, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7                    )"#)
                .bind(self.index.clone())
                .bind(self.version.clone())
                .bind(self.padding.clone())
                .bind(self.lb_pair.clone())
                .bind(self.bins.clone())
                        .bind(self.metadata.pubkey.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for BinArrayRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO bin_array_account (
                        "index",
                        "version",
                        "padding",
                        "lb_pair",
                        "bins",
                                    __pubkey, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7                    ) ON CONFLICT (
                        __pubkey
                    ) DO UPDATE SET
                        "index" = EXCLUDED."index",
                        "version" = EXCLUDED."version",
                        "padding" = EXCLUDED."padding",
                        "lb_pair" = EXCLUDED."lb_pair",
                        "bins" = EXCLUDED."bins",
                                    __slot = EXCLUDED.__slot
                    "#)
                .bind(self.index.clone())
                .bind(self.version.clone())
                .bind(self.padding.clone())
                .bind(self.lb_pair.clone())
                .bind(self.bins.clone())
                        .bind(self.metadata.pubkey)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for BinArrayRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM bin_array_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for BinArrayRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM bin_array_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct BinArrayMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for BinArrayMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS bin_array_account (
                        -- Account data
                                    "index" INT8 NOT NULL,
                        "version" INT2 NOT NULL,
                        "padding" BYTEA NOT NULL,
                        "lb_pair" BYTEA NOT NULL,
                        "bins" JSONB NOT NULL,
            
                        -- Account metadata
            __pubkey BYTEA NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__pubkey)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS bin_array_account"#).execute(connection).await?;
        Ok(())
    }
}

