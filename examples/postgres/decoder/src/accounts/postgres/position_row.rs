//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account::AccountMetadata;
use carbon_core::postgres::metadata::AccountRowMetadata;
use carbon_core::postgres::primitives::Pubkey;
use carbon_core::postgres::primitives::U64;
use crate::accounts::Position;
use crate::types::FeeInfo;
use crate::types::UserRewardInfo;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct PositionRow {
    #[sqlx(flatten)]
        pub metadata: AccountRowMetadata,
            pub lb_pair: Pubkey,
        pub owner: Pubkey,
        pub liquidity_shares: Vec<U64>,
        pub reward_infos: sqlx::types::Json<Vec<UserRewardInfo>>,
        pub fee_infos: sqlx::types::Json<Vec<FeeInfo>>,
        pub lower_bin_id: i32,
        pub upper_bin_id: i32,
        pub last_updated_at: i64,
        pub total_claimed_fee_x_amount: U64,
        pub total_claimed_fee_y_amount: U64,
        pub total_claimed_rewards: Vec<U64>,
        pub reserved: Vec<u8>,
}

impl PositionRow {
    pub fn from_parts(source: Position, metadata: AccountMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        lb_pair: source.lb_pair.into(),
                        owner: source.owner.into(),
                        liquidity_shares: source.liquidity_shares.into_iter().map(|element| element.into()).collect(),
                        reward_infos: sqlx::types::Json(source.reward_infos.into_iter().map(|element| element.into()).collect()),
                        fee_infos: sqlx::types::Json(source.fee_infos.into_iter().map(|element| element.into()).collect()),
                        lower_bin_id: source.lower_bin_id.into(),
                        upper_bin_id: source.upper_bin_id.into(),
                        last_updated_at: source.last_updated_at.into(),
                        total_claimed_fee_x_amount: source.total_claimed_fee_x_amount.into(),
                        total_claimed_fee_y_amount: source.total_claimed_fee_y_amount.into(),
                        total_claimed_rewards: source.total_claimed_rewards.into_iter().map(|element| element.into()).collect(),
                        reserved: source.reserved.into(),
                    }
    }
}

impl TryFrom<PositionRow> for Position {
    type Error = carbon_core::error::Error;
    fn try_from(source: PositionRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        lb_pair: *source.lb_pair,
                        owner: *source.owner,
                        liquidity_shares: source.liquidity_shares.into_iter().map(|element| Ok(*element)).collect::<Result<Vec<_>, _>>()?.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert array element to primitive".to_string()))?,
                        reward_infos: source.reward_infos.0.into_iter().collect::<Vec<_>>().try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        fee_infos: source.fee_infos.0.into_iter().collect::<Vec<_>>().try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        lower_bin_id: source.lower_bin_id.into(),
                        upper_bin_id: source.upper_bin_id.into(),
                        last_updated_at: source.last_updated_at.into(),
                        total_claimed_fee_x_amount: *source.total_claimed_fee_x_amount,
                        total_claimed_fee_y_amount: *source.total_claimed_fee_y_amount,
                        total_claimed_rewards: source.total_claimed_rewards.into_iter().map(|element| Ok(*element)).collect::<Result<Vec<_>, _>>()?.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert array element to primitive".to_string()))?,
                        reserved: source.reserved.into(),
                    })
    }
}

impl carbon_core::postgres::operations::Table for Position {
    fn table() -> &'static str {
        "position_account"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__pubkey",
            "__slot",
                                    "lb_pair",
                        "owner",
                        "liquidity_shares",
                        "reward_infos",
                        "fee_infos",
                        "lower_bin_id",
                        "upper_bin_id",
                        "last_updated_at",
                        "total_claimed_fee_x_amount",
                        "total_claimed_fee_y_amount",
                        "total_claimed_rewards",
                        "reserved",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for PositionRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO position_account (
                            "lb_pair",
                            "owner",
                            "liquidity_shares",
                            "reward_infos",
                            "fee_infos",
                            "lower_bin_id",
                            "upper_bin_id",
                            "last_updated_at",
                            "total_claimed_fee_x_amount",
                            "total_claimed_fee_y_amount",
                            "total_claimed_rewards",
                            "reserved",
                                        __pubkey, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7,                            $8,                            $9,                            $10,                            $11,                            $12,                            $13,                            $14                    )"#)
                .bind(self.lb_pair.clone())
                .bind(self.owner.clone())
                .bind(self.liquidity_shares.clone())
                .bind(self.reward_infos.clone())
                .bind(self.fee_infos.clone())
                .bind(self.lower_bin_id.clone())
                .bind(self.upper_bin_id.clone())
                .bind(self.last_updated_at.clone())
                .bind(self.total_claimed_fee_x_amount.clone())
                .bind(self.total_claimed_fee_y_amount.clone())
                .bind(self.total_claimed_rewards.clone())
                .bind(self.reserved.clone())
                        .bind(self.metadata.pubkey.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for PositionRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO position_account (
                        "lb_pair",
                        "owner",
                        "liquidity_shares",
                        "reward_infos",
                        "fee_infos",
                        "lower_bin_id",
                        "upper_bin_id",
                        "last_updated_at",
                        "total_claimed_fee_x_amount",
                        "total_claimed_fee_y_amount",
                        "total_claimed_rewards",
                        "reserved",
                                    __pubkey, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7,                        $8,                        $9,                        $10,                        $11,                        $12,                        $13,                        $14                    ) ON CONFLICT (
                        __pubkey
                    ) DO UPDATE SET
                        "lb_pair" = EXCLUDED."lb_pair",
                        "owner" = EXCLUDED."owner",
                        "liquidity_shares" = EXCLUDED."liquidity_shares",
                        "reward_infos" = EXCLUDED."reward_infos",
                        "fee_infos" = EXCLUDED."fee_infos",
                        "lower_bin_id" = EXCLUDED."lower_bin_id",
                        "upper_bin_id" = EXCLUDED."upper_bin_id",
                        "last_updated_at" = EXCLUDED."last_updated_at",
                        "total_claimed_fee_x_amount" = EXCLUDED."total_claimed_fee_x_amount",
                        "total_claimed_fee_y_amount" = EXCLUDED."total_claimed_fee_y_amount",
                        "total_claimed_rewards" = EXCLUDED."total_claimed_rewards",
                        "reserved" = EXCLUDED."reserved",
                                    __slot = EXCLUDED.__slot
                    "#)
                .bind(self.lb_pair.clone())
                .bind(self.owner.clone())
                .bind(self.liquidity_shares.clone())
                .bind(self.reward_infos.clone())
                .bind(self.fee_infos.clone())
                .bind(self.lower_bin_id.clone())
                .bind(self.upper_bin_id.clone())
                .bind(self.last_updated_at.clone())
                .bind(self.total_claimed_fee_x_amount.clone())
                .bind(self.total_claimed_fee_y_amount.clone())
                .bind(self.total_claimed_rewards.clone())
                .bind(self.reserved.clone())
                        .bind(self.metadata.pubkey)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for PositionRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM position_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for PositionRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM position_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct PositionMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for PositionMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS position_account (
                        -- Account data
                                    "lb_pair" BYTEA NOT NULL,
                        "owner" BYTEA NOT NULL,
                        "liquidity_shares" NUMERIC(20)[] NOT NULL,
                        "reward_infos" JSONB NOT NULL,
                        "fee_infos" JSONB NOT NULL,
                        "lower_bin_id" INT4 NOT NULL,
                        "upper_bin_id" INT4 NOT NULL,
                        "last_updated_at" INT8 NOT NULL,
                        "total_claimed_fee_x_amount" NUMERIC(20) NOT NULL,
                        "total_claimed_fee_y_amount" NUMERIC(20) NOT NULL,
                        "total_claimed_rewards" NUMERIC(20)[] NOT NULL,
                        "reserved" BYTEA NOT NULL,
            
                        -- Account metadata
            __pubkey BYTEA NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__pubkey)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS position_account"#).execute(connection).await?;
        Ok(())
    }
}

