//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account::AccountMetadata;
use carbon_core::postgres::metadata::AccountRowMetadata;
use carbon_core::postgres::primitives::Pubkey;
use crate::accounts::TokenBadge;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct TokenBadgeRow {
    #[sqlx(flatten)]
        pub metadata: AccountRowMetadata,
            pub token_mint: Pubkey,
        pub padding: Vec<u8>,
}

impl TokenBadgeRow {
    pub fn from_parts(source: TokenBadge, metadata: AccountMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        token_mint: source.token_mint.into(),
                        padding: source.padding.into(),
                    }
    }
}

impl TryFrom<TokenBadgeRow> for TokenBadge {
    type Error = carbon_core::error::Error;
    fn try_from(source: TokenBadgeRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        token_mint: *source.token_mint,
                        padding: source.padding.into(),
                    })
    }
}

impl carbon_core::postgres::operations::Table for TokenBadge {
    fn table() -> &'static str {
        "token_badge_account"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__pubkey",
            "__slot",
                                    "token_mint",
                        "padding",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for TokenBadgeRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO token_badge_account (
                            "token_mint",
                            "padding",
                                        __pubkey, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4                    )"#)
                .bind(self.token_mint.clone())
                .bind(self.padding.clone())
                        .bind(self.metadata.pubkey.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for TokenBadgeRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO token_badge_account (
                        "token_mint",
                        "padding",
                                    __pubkey, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4                    ) ON CONFLICT (
                        __pubkey
                    ) DO UPDATE SET
                        "token_mint" = EXCLUDED."token_mint",
                        "padding" = EXCLUDED."padding",
                                    __slot = EXCLUDED.__slot
                    "#)
                .bind(self.token_mint.clone())
                .bind(self.padding.clone())
                        .bind(self.metadata.pubkey)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for TokenBadgeRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM token_badge_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for TokenBadgeRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM token_badge_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct TokenBadgeMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for TokenBadgeMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS token_badge_account (
                        -- Account data
                                    "token_mint" BYTEA NOT NULL,
                        "padding" BYTEA NOT NULL,
            
                        -- Account metadata
            __pubkey BYTEA NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__pubkey)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS token_badge_account"#).execute(connection).await?;
        Ok(())
    }
}

