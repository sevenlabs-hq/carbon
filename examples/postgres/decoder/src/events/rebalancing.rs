//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::borsh;
use carbon_core::borsh::BorshDeserialize;
use solana_pubkey::Pubkey;

#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct RebalancingEvent {
pub lb_pair: Pubkey,
pub position: Pubkey,
pub x_withdrawn_amount: u64,
pub x_added_amount: u64,
pub y_withdrawn_amount: u64,
pub y_added_amount: u64,
pub x_fee_amount: u64,
pub y_fee_amount: u64,
pub old_min_id: i32,
pub old_max_id: i32,
pub new_min_id: i32,
pub new_max_id: i32,
pub rewards: [u64; 2],
}

impl RebalancingEvent {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                                    if data.len() < 8 {
                                        return None;
                                    }
                                    let discriminator = &data[0..8];
                                    if discriminator != &[0, 109, 117, 179, 61, 91, 199, 200] {
                                        return None;
                                    }
                                
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

