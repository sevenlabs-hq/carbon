//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct CollectRemainingRewards {
        pub reward_index: u8,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectRemainingRewardsInstructionAccounts {
    pub reward_funder: solana_pubkey::Pubkey,
    pub funder_token_account: solana_pubkey::Pubkey,
    pub pool_state: solana_pubkey::Pubkey,
    pub reward_token_vault: solana_pubkey::Pubkey,
    pub reward_vault_mint: solana_pubkey::Pubkey,
    pub token_program: solana_pubkey::Pubkey,
    pub token_program2022: solana_pubkey::Pubkey,
    pub memo_program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl CollectRemainingRewards {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[18, 237, 166, 197, 34, 16, 213, 144] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for CollectRemainingRewards {
    type ArrangedAccounts = CollectRemainingRewardsInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let reward_funder = next_account(&mut iter)?;
                let funder_token_account = next_account(&mut iter)?;
                let pool_state = next_account(&mut iter)?;
                let reward_token_vault = next_account(&mut iter)?;
                let reward_vault_mint = next_account(&mut iter)?;
                let token_program = next_account(&mut iter)?;
                let token_program2022 = next_account(&mut iter)?;
                let memo_program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(CollectRemainingRewardsInstructionAccounts {
                        reward_funder: reward_funder,
                        funder_token_account: funder_token_account,
                        pool_state: pool_state,
                        reward_token_vault: reward_token_vault,
                        reward_vault_mint: reward_vault_mint,
                        token_program: token_program,
                        token_program2022: token_program2022,
                        memo_program: memo_program,
                        remaining: remaining.to_vec(),
        })
            }
}

