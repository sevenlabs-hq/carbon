//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct CollectProtocolFee {
        pub amount0_requested: u64,
        pub amount1_requested: u64,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectProtocolFeeInstructionAccounts {
    pub owner: solana_pubkey::Pubkey,
    pub pool_state: solana_pubkey::Pubkey,
    pub amm_config: solana_pubkey::Pubkey,
    pub token_vault0: solana_pubkey::Pubkey,
    pub token_vault1: solana_pubkey::Pubkey,
    pub vault0_mint: solana_pubkey::Pubkey,
    pub vault1_mint: solana_pubkey::Pubkey,
    pub recipient_token_account0: solana_pubkey::Pubkey,
    pub recipient_token_account1: solana_pubkey::Pubkey,
    pub token_program: solana_pubkey::Pubkey,
    pub token_program2022: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl CollectProtocolFee {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[136, 136, 252, 221, 194, 66, 126, 89] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for CollectProtocolFee {
    type ArrangedAccounts = CollectProtocolFeeInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let owner = next_account(&mut iter)?;
                let pool_state = next_account(&mut iter)?;
                let amm_config = next_account(&mut iter)?;
                let token_vault0 = next_account(&mut iter)?;
                let token_vault1 = next_account(&mut iter)?;
                let vault0_mint = next_account(&mut iter)?;
                let vault1_mint = next_account(&mut iter)?;
                let recipient_token_account0 = next_account(&mut iter)?;
                let recipient_token_account1 = next_account(&mut iter)?;
                let token_program = next_account(&mut iter)?;
                let token_program2022 = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(CollectProtocolFeeInstructionAccounts {
                        owner: owner,
                        pool_state: pool_state,
                        amm_config: amm_config,
                        token_vault0: token_vault0,
                        token_vault1: token_vault1,
                        vault0_mint: vault0_mint,
                        vault1_mint: vault1_mint,
                        recipient_token_account0: recipient_token_account0,
                        recipient_token_account1: recipient_token_account1,
                        token_program: token_program,
                        token_program2022: token_program2022,
                        remaining: remaining.to_vec(),
        })
            }
}

