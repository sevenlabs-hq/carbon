//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct Swap {
        pub amount: u64,
        pub other_amount_threshold: u64,
        pub sqrt_price_limit_x64: u128,
        pub is_base_input: bool,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapInstructionAccounts {
    pub payer: solana_pubkey::Pubkey,
    pub amm_config: solana_pubkey::Pubkey,
    pub pool_state: solana_pubkey::Pubkey,
    pub input_token_account: solana_pubkey::Pubkey,
    pub output_token_account: solana_pubkey::Pubkey,
    pub input_vault: solana_pubkey::Pubkey,
    pub output_vault: solana_pubkey::Pubkey,
    pub observation_state: solana_pubkey::Pubkey,
    pub token_program: solana_pubkey::Pubkey,
    pub tick_array: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl Swap {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[248, 198, 158, 145, 225, 117, 135, 200] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for Swap {
    type ArrangedAccounts = SwapInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let payer = next_account(&mut iter)?;
                let amm_config = next_account(&mut iter)?;
                let pool_state = next_account(&mut iter)?;
                let input_token_account = next_account(&mut iter)?;
                let output_token_account = next_account(&mut iter)?;
                let input_vault = next_account(&mut iter)?;
                let output_vault = next_account(&mut iter)?;
                let observation_state = next_account(&mut iter)?;
                let token_program = next_account(&mut iter)?;
                let tick_array = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(SwapInstructionAccounts {
                        payer: payer,
                        amm_config: amm_config,
                        pool_state: pool_state,
                        input_token_account: input_token_account,
                        output_token_account: output_token_account,
                        input_vault: input_vault,
                        output_vault: output_vault,
                        observation_state: observation_state,
                        token_program: token_program,
                        tick_array: tick_array,
                        remaining: remaining.to_vec(),
        })
            }
}

