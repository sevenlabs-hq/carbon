//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

#[cfg(feature = "postgres")]
pub mod postgres;

#[cfg(feature = "graphql")]
pub mod graphql;

use crate::{PROGRAM_ID, AmmV3Decoder};

pub mod close_position;
pub mod collect_fund_fee;
pub mod collect_protocol_fee;
pub mod collect_remaining_rewards;
pub mod create_amm_config;
pub mod create_operation_account;
pub mod create_pool;
pub mod decrease_liquidity;
pub mod decrease_liquidity_v2;
pub mod increase_liquidity;
pub mod increase_liquidity_v2;
pub mod initialize_reward;
pub mod open_position;
pub mod open_position_v2;
pub mod set_reward_params;
pub mod swap;
pub mod swap_router_base_in;
pub mod swap_v2;
pub mod transfer_reward_owner;
pub mod update_amm_config;
pub mod update_operation_account;
pub mod update_pool_status;
pub mod update_reward_infos;

pub use self::close_position::*;
pub use self::collect_fund_fee::*;
pub use self::collect_protocol_fee::*;
pub use self::collect_remaining_rewards::*;
pub use self::create_amm_config::*;
pub use self::create_operation_account::*;
pub use self::create_pool::*;
pub use self::decrease_liquidity::*;
pub use self::decrease_liquidity_v2::*;
pub use self::increase_liquidity::*;
pub use self::increase_liquidity_v2::*;
pub use self::initialize_reward::*;
pub use self::open_position::*;
pub use self::open_position_v2::*;
pub use self::set_reward_params::*;
pub use self::swap::*;
pub use self::swap_router_base_in::*;
pub use self::swap_v2::*;
pub use self::transfer_reward_owner::*;
pub use self::update_amm_config::*;
pub use self::update_operation_account::*;
pub use self::update_pool_status::*;
pub use self::update_reward_infos::*;

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(tag = "type", content = "data"))]
pub enum AmmV3Instruction {
    ClosePosition(ClosePosition),
    CollectFundFee(CollectFundFee),
    CollectProtocolFee(CollectProtocolFee),
    CollectRemainingRewards(CollectRemainingRewards),
    CreateAmmConfig(CreateAmmConfig),
    CreateOperationAccount(CreateOperationAccount),
    CreatePool(CreatePool),
    DecreaseLiquidity(DecreaseLiquidity),
    DecreaseLiquidityV2(DecreaseLiquidityV2),
    IncreaseLiquidity(IncreaseLiquidity),
    IncreaseLiquidityV2(IncreaseLiquidityV2),
    InitializeReward(InitializeReward),
    OpenPosition(OpenPosition),
    OpenPositionV2(OpenPositionV2),
    SetRewardParams(SetRewardParams),
    Swap(Swap),
    SwapRouterBaseIn(SwapRouterBaseIn),
    SwapV2(SwapV2),
    TransferRewardOwner(TransferRewardOwner),
    UpdateAmmConfig(UpdateAmmConfig),
    UpdateOperationAccount(UpdateOperationAccount),
    UpdatePoolStatus(UpdatePoolStatus),
    UpdateRewardInfos(UpdateRewardInfos),
}

impl carbon_core::instruction::InstructionDecoder<'_> for AmmV3Decoder {
    type InstructionType = AmmV3Instruction;

    fn decode_instruction(
        &self,
        instruction: &solana_instruction::Instruction,
    ) -> Option<carbon_core::instruction::DecodedInstruction<Self::InstructionType>> {
        if !instruction.program_id.eq(&PROGRAM_ID) {
            return None;
        }

        let data = instruction.data.as_slice();
        
                // Try to decode CreateAmmConfig
        {
            if let Some(decoded) = create_amm_config::CreateAmmConfig::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::CreateAmmConfig(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode UpdateAmmConfig
        {
            if let Some(decoded) = update_amm_config::UpdateAmmConfig::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::UpdateAmmConfig(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CreatePool
        {
            if let Some(decoded) = create_pool::CreatePool::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::CreatePool(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode UpdatePoolStatus
        {
            if let Some(decoded) = update_pool_status::UpdatePoolStatus::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::UpdatePoolStatus(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CreateOperationAccount
        {
            if let Some(decoded) = create_operation_account::CreateOperationAccount::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::CreateOperationAccount(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode UpdateOperationAccount
        {
            if let Some(decoded) = update_operation_account::UpdateOperationAccount::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::UpdateOperationAccount(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode TransferRewardOwner
        {
            if let Some(decoded) = transfer_reward_owner::TransferRewardOwner::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::TransferRewardOwner(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode InitializeReward
        {
            if let Some(decoded) = initialize_reward::InitializeReward::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::InitializeReward(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CollectRemainingRewards
        {
            if let Some(decoded) = collect_remaining_rewards::CollectRemainingRewards::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::CollectRemainingRewards(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode UpdateRewardInfos
        {
            if let Some(decoded) = update_reward_infos::UpdateRewardInfos::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::UpdateRewardInfos(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode SetRewardParams
        {
            if let Some(decoded) = set_reward_params::SetRewardParams::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::SetRewardParams(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CollectProtocolFee
        {
            if let Some(decoded) = collect_protocol_fee::CollectProtocolFee::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::CollectProtocolFee(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode CollectFundFee
        {
            if let Some(decoded) = collect_fund_fee::CollectFundFee::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::CollectFundFee(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode OpenPosition
        {
            if let Some(decoded) = open_position::OpenPosition::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::OpenPosition(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode OpenPositionV2
        {
            if let Some(decoded) = open_position_v2::OpenPositionV2::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::OpenPositionV2(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode ClosePosition
        {
            if let Some(decoded) = close_position::ClosePosition::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::ClosePosition(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode IncreaseLiquidity
        {
            if let Some(decoded) = increase_liquidity::IncreaseLiquidity::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::IncreaseLiquidity(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode IncreaseLiquidityV2
        {
            if let Some(decoded) = increase_liquidity_v2::IncreaseLiquidityV2::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::IncreaseLiquidityV2(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode DecreaseLiquidity
        {
            if let Some(decoded) = decrease_liquidity::DecreaseLiquidity::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::DecreaseLiquidity(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode DecreaseLiquidityV2
        {
            if let Some(decoded) = decrease_liquidity_v2::DecreaseLiquidityV2::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::DecreaseLiquidityV2(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode Swap
        {
            if let Some(decoded) = swap::Swap::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::Swap(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode SwapV2
        {
            if let Some(decoded) = swap_v2::SwapV2::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::SwapV2(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                // Try to decode SwapRouterBaseIn
        {
            if let Some(decoded) = swap_router_base_in::SwapRouterBaseIn::decode(data) {
                return Some(carbon_core::instruction::DecodedInstruction {
                    program_id: instruction.program_id,
                    data: AmmV3Instruction::SwapRouterBaseIn(decoded),
                    accounts: instruction.accounts.clone(),
                });
            }
        }
                
        None
    }
}

