//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct SetRewardParams {
        pub reward_index: u8,
        pub emissions_per_second_x64: u128,
        pub open_time: u64,
        pub end_time: u64,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetRewardParamsInstructionAccounts {
    pub authority: solana_pubkey::Pubkey,
    pub amm_config: solana_pubkey::Pubkey,
    pub pool_state: solana_pubkey::Pubkey,
    pub operation_state: solana_pubkey::Pubkey,
    pub token_program: solana_pubkey::Pubkey,
    pub token_program2022: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl SetRewardParams {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[112, 52, 167, 75, 32, 201, 211, 137] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for SetRewardParams {
    type ArrangedAccounts = SetRewardParamsInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let authority = next_account(&mut iter)?;
                let amm_config = next_account(&mut iter)?;
                let pool_state = next_account(&mut iter)?;
                let operation_state = next_account(&mut iter)?;
                let token_program = next_account(&mut iter)?;
                let token_program2022 = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(SetRewardParamsInstructionAccounts {
                        authority: authority,
                        amm_config: amm_config,
                        pool_state: pool_state,
                        operation_state: operation_state,
                        token_program: token_program,
                        token_program2022: token_program2022,
                        remaining: remaining.to_vec(),
        })
            }
}

