//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::instruction::InstructionMetadata;
use carbon_core::postgres::metadata::InstructionRowMetadata;
use crate::instructions::ClaimTokenIncentives;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct ClaimTokenIncentivesRow {
    #[sqlx(flatten)]
        pub metadata: InstructionRowMetadata,
    }

impl ClaimTokenIncentivesRow {
    pub fn from_parts(_source: ClaimTokenIncentives, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                    }
    }
}

impl TryFrom<ClaimTokenIncentivesRow> for ClaimTokenIncentives {
    type Error = carbon_core::error::Error;
    fn try_from(_source: ClaimTokenIncentivesRow) -> Result<Self, Self::Error> {
        Ok(Self {
                    })
    }
}

impl carbon_core::postgres::operations::Table for ClaimTokenIncentives {
    fn table() -> &'static str {
        "claim_token_incentives_instruction"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__signature",
            "__index",
            "__stack_height",
            "__slot",
                                ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for ClaimTokenIncentivesRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO claim_token_incentives_instruction (
                                        __signature, __index, __stack_height, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4                    )"#)
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for ClaimTokenIncentivesRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO claim_token_incentives_instruction (
                                    __signature, __index, __stack_height, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4                    ) ON CONFLICT (
                        __signature, __index
                    ) DO UPDATE SET
                                    __index = EXCLUDED.__index,
            __stack_height = EXCLUDED.__stack_height,
            __slot = EXCLUDED.__slot
                    "#)
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for ClaimTokenIncentivesRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM claim_token_incentives_instruction WHERE
                        __signature = $1 AND __index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for ClaimTokenIncentivesRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM claim_token_incentives_instruction WHERE
                        __signature = $1 AND __index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct ClaimTokenIncentivesMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for ClaimTokenIncentivesMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS claim_token_incentives_instruction (
                        -- Instruction data
                        
                        -- Instruction metadata
            __signature TEXT NOT NULL,
            __index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot BIGINT,
            
                        PRIMARY KEY (__signature, __index)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS claim_token_incentives_instruction"#).execute(connection).await?;
        Ok(())
    }
}

