//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

pub mod close_position_row;
pub mod collect_fund_fee_row;
pub mod collect_protocol_fee_row;
pub mod collect_remaining_rewards_row;
pub mod create_amm_config_row;
pub mod create_operation_account_row;
pub mod create_pool_row;
pub mod decrease_liquidity_row;
pub mod decrease_liquidity_v2_row;
pub mod increase_liquidity_row;
pub mod increase_liquidity_v2_row;
pub mod initialize_reward_row;
pub mod open_position_row;
pub mod open_position_v2_row;
pub mod set_reward_params_row;
pub mod swap_row;
pub mod swap_router_base_in_row;
pub mod swap_v2_row;
pub mod transfer_reward_owner_row;
pub mod update_amm_config_row;
pub mod update_operation_account_row;
pub mod update_pool_status_row;
pub mod update_reward_infos_row;

pub use self::close_position_row::*;
pub use self::collect_fund_fee_row::*;
pub use self::collect_protocol_fee_row::*;
pub use self::collect_remaining_rewards_row::*;
pub use self::create_amm_config_row::*;
pub use self::create_operation_account_row::*;
pub use self::create_pool_row::*;
pub use self::decrease_liquidity_row::*;
pub use self::decrease_liquidity_v2_row::*;
pub use self::increase_liquidity_row::*;
pub use self::increase_liquidity_v2_row::*;
pub use self::initialize_reward_row::*;
pub use self::open_position_row::*;
pub use self::open_position_v2_row::*;
pub use self::set_reward_params_row::*;
pub use self::swap_row::*;
pub use self::swap_router_base_in_row::*;
pub use self::swap_v2_row::*;
pub use self::transfer_reward_owner_row::*;
pub use self::update_amm_config_row::*;
pub use self::update_operation_account_row::*;
pub use self::update_pool_status_row::*;
pub use self::update_reward_infos_row::*;

use super::AmmV3Instruction;

pub struct AmmV3InstructionsMigration;

impl sqlx_migrator::Migration<sqlx::Postgres> for AmmV3InstructionsMigration {
    fn app(&self) -> &str {
        "amm-v3"
    }

    fn name(&self) -> &str {
        "amm_v3_instructions"
    }

    fn operations(&self) -> Vec<Box<dyn sqlx_migrator::Operation<sqlx::Postgres>>> {
        vec![
                        Box::new(ClosePositionMigrationOperation),
                        Box::new(CollectFundFeeMigrationOperation),
                        Box::new(CollectProtocolFeeMigrationOperation),
                        Box::new(CollectRemainingRewardsMigrationOperation),
                        Box::new(CreateAmmConfigMigrationOperation),
                        Box::new(CreateOperationAccountMigrationOperation),
                        Box::new(CreatePoolMigrationOperation),
                        Box::new(DecreaseLiquidityMigrationOperation),
                        Box::new(DecreaseLiquidityV2MigrationOperation),
                        Box::new(IncreaseLiquidityMigrationOperation),
                        Box::new(IncreaseLiquidityV2MigrationOperation),
                        Box::new(InitializeRewardMigrationOperation),
                        Box::new(OpenPositionMigrationOperation),
                        Box::new(OpenPositionV2MigrationOperation),
                        Box::new(SetRewardParamsMigrationOperation),
                        Box::new(SwapMigrationOperation),
                        Box::new(SwapRouterBaseInMigrationOperation),
                        Box::new(SwapV2MigrationOperation),
                        Box::new(TransferRewardOwnerMigrationOperation),
                        Box::new(UpdateAmmConfigMigrationOperation),
                        Box::new(UpdateOperationAccountMigrationOperation),
                        Box::new(UpdatePoolStatusMigrationOperation),
                        Box::new(UpdateRewardInfosMigrationOperation),
                    ]
    }

    fn parents(&self) -> Vec<Box<dyn sqlx_migrator::Migration<sqlx::Postgres>>> {
        vec![]
    }
}

pub struct AmmV3InstructionWithMetadata(pub AmmV3Instruction, pub carbon_core::instruction::InstructionMetadata);

impl From<(AmmV3Instruction, carbon_core::instruction::InstructionMetadata)> for AmmV3InstructionWithMetadata {
    fn from(value: (AmmV3Instruction, carbon_core::instruction::InstructionMetadata)) -> Self {
        AmmV3InstructionWithMetadata(value.0, value.1)
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for AmmV3InstructionWithMetadata {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        let AmmV3InstructionWithMetadata(instruction, metadata) = self;
        match instruction {
                        AmmV3Instruction::CreateAmmConfig(instruction) => {
                let row = create_amm_config_row::CreateAmmConfigRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::UpdateAmmConfig(instruction) => {
                let row = update_amm_config_row::UpdateAmmConfigRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CreatePool(instruction) => {
                let row = create_pool_row::CreatePoolRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::UpdatePoolStatus(instruction) => {
                let row = update_pool_status_row::UpdatePoolStatusRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CreateOperationAccount(instruction) => {
                let row = create_operation_account_row::CreateOperationAccountRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::UpdateOperationAccount(instruction) => {
                let row = update_operation_account_row::UpdateOperationAccountRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::TransferRewardOwner(instruction) => {
                let row = transfer_reward_owner_row::TransferRewardOwnerRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::InitializeReward(instruction) => {
                let row = initialize_reward_row::InitializeRewardRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CollectRemainingRewards(instruction) => {
                let row = collect_remaining_rewards_row::CollectRemainingRewardsRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::UpdateRewardInfos(instruction) => {
                let row = update_reward_infos_row::UpdateRewardInfosRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::SetRewardParams(instruction) => {
                let row = set_reward_params_row::SetRewardParamsRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CollectProtocolFee(instruction) => {
                let row = collect_protocol_fee_row::CollectProtocolFeeRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CollectFundFee(instruction) => {
                let row = collect_fund_fee_row::CollectFundFeeRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::OpenPosition(instruction) => {
                let row = open_position_row::OpenPositionRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::OpenPositionV2(instruction) => {
                let row = open_position_v2_row::OpenPositionV2Row::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::ClosePosition(instruction) => {
                let row = close_position_row::ClosePositionRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::IncreaseLiquidity(instruction) => {
                let row = increase_liquidity_row::IncreaseLiquidityRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::IncreaseLiquidityV2(instruction) => {
                let row = increase_liquidity_v2_row::IncreaseLiquidityV2Row::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::DecreaseLiquidity(instruction) => {
                let row = decrease_liquidity_row::DecreaseLiquidityRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::DecreaseLiquidityV2(instruction) => {
                let row = decrease_liquidity_v2_row::DecreaseLiquidityV2Row::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::Swap(instruction) => {
                let row = swap_row::SwapRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::SwapV2(instruction) => {
                let row = swap_v2_row::SwapV2Row::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::SwapRouterBaseIn(instruction) => {
                let row = swap_router_base_in_row::SwapRouterBaseInRow::from_parts(instruction.clone(), metadata.clone());
                row.insert(pool).await?;
                Ok(())
            }
                    }
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for AmmV3InstructionWithMetadata {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        let AmmV3InstructionWithMetadata(instruction, metadata) = self;
        match instruction {
                        AmmV3Instruction::CreateAmmConfig(instruction) => {
                let row = create_amm_config_row::CreateAmmConfigRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::UpdateAmmConfig(instruction) => {
                let row = update_amm_config_row::UpdateAmmConfigRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CreatePool(instruction) => {
                let row = create_pool_row::CreatePoolRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::UpdatePoolStatus(instruction) => {
                let row = update_pool_status_row::UpdatePoolStatusRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CreateOperationAccount(instruction) => {
                let row = create_operation_account_row::CreateOperationAccountRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::UpdateOperationAccount(instruction) => {
                let row = update_operation_account_row::UpdateOperationAccountRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::TransferRewardOwner(instruction) => {
                let row = transfer_reward_owner_row::TransferRewardOwnerRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::InitializeReward(instruction) => {
                let row = initialize_reward_row::InitializeRewardRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CollectRemainingRewards(instruction) => {
                let row = collect_remaining_rewards_row::CollectRemainingRewardsRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::UpdateRewardInfos(instruction) => {
                let row = update_reward_infos_row::UpdateRewardInfosRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::SetRewardParams(instruction) => {
                let row = set_reward_params_row::SetRewardParamsRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CollectProtocolFee(instruction) => {
                let row = collect_protocol_fee_row::CollectProtocolFeeRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::CollectFundFee(instruction) => {
                let row = collect_fund_fee_row::CollectFundFeeRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::OpenPosition(instruction) => {
                let row = open_position_row::OpenPositionRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::OpenPositionV2(instruction) => {
                let row = open_position_v2_row::OpenPositionV2Row::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::ClosePosition(instruction) => {
                let row = close_position_row::ClosePositionRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::IncreaseLiquidity(instruction) => {
                let row = increase_liquidity_row::IncreaseLiquidityRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::IncreaseLiquidityV2(instruction) => {
                let row = increase_liquidity_v2_row::IncreaseLiquidityV2Row::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::DecreaseLiquidity(instruction) => {
                let row = decrease_liquidity_row::DecreaseLiquidityRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::DecreaseLiquidityV2(instruction) => {
                let row = decrease_liquidity_v2_row::DecreaseLiquidityV2Row::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::Swap(instruction) => {
                let row = swap_row::SwapRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::SwapV2(instruction) => {
                let row = swap_v2_row::SwapV2Row::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                        AmmV3Instruction::SwapRouterBaseIn(instruction) => {
                let row = swap_router_base_in_row::SwapRouterBaseInRow::from_parts(instruction.clone(), metadata.clone());
                row.upsert(pool).await?;
                Ok(())
            }
                    }
    }
}

