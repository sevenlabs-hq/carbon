//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::instruction::InstructionMetadata;
use carbon_core::postgres::metadata::InstructionRowMetadata;
use carbon_core::postgres::primitives::U128;
use carbon_core::postgres::primitives::U64;
use crate::instructions::DecreaseLiquidityV2;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct DecreaseLiquidityV2Row {
    #[sqlx(flatten)]
        pub metadata: InstructionRowMetadata,
            pub liquidity: U128,
        pub amount0_min: U64,
        pub amount1_min: U64,
}

impl DecreaseLiquidityV2Row {
    pub fn from_parts(source: DecreaseLiquidityV2, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        liquidity: source.liquidity.into(),
                        amount0_min: source.amount0_min.into(),
                        amount1_min: source.amount1_min.into(),
                    }
    }
}

impl TryFrom<DecreaseLiquidityV2Row> for DecreaseLiquidityV2 {
    type Error = carbon_core::error::Error;
    fn try_from(source: DecreaseLiquidityV2Row) -> Result<Self, Self::Error> {
        Ok(Self {
                        liquidity: *source.liquidity,
                        amount0_min: *source.amount0_min,
                        amount1_min: *source.amount1_min,
                    })
    }
}

impl carbon_core::postgres::operations::Table for DecreaseLiquidityV2 {
    fn table() -> &'static str {
        "decrease_liquidity_v2_instruction"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__signature",
            "__index",
            "__stack_height",
            "__slot",
                                    "liquidity",
                        "amount0_min",
                        "amount1_min",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for DecreaseLiquidityV2Row {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO decrease_liquidity_v2_instruction (
                            "liquidity",
                            "amount0_min",
                            "amount1_min",
                                        __signature, __index, __stack_height, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7                    )"#)
                .bind(self.liquidity.clone())
                .bind(self.amount0_min.clone())
                .bind(self.amount1_min.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for DecreaseLiquidityV2Row {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO decrease_liquidity_v2_instruction (
                        "liquidity",
                        "amount0_min",
                        "amount1_min",
                                    __signature, __index, __stack_height, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7                    ) ON CONFLICT (
                        __signature, __index
                    ) DO UPDATE SET
                        "liquidity" = EXCLUDED."liquidity",
                        "amount0_min" = EXCLUDED."amount0_min",
                        "amount1_min" = EXCLUDED."amount1_min",
                                    __index = EXCLUDED.__index,
            __stack_height = EXCLUDED.__stack_height,
            __slot = EXCLUDED.__slot
                    "#)
                .bind(self.liquidity.clone())
                .bind(self.amount0_min.clone())
                .bind(self.amount1_min.clone())
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.index.clone())
        .bind(self.metadata.stack_height.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for DecreaseLiquidityV2Row {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM decrease_liquidity_v2_instruction WHERE
                        __signature = $1 AND __index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for DecreaseLiquidityV2Row {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM decrease_liquidity_v2_instruction WHERE
                        __signature = $1 AND __index = $2
                    "#)
                .bind(key.0)
        .bind(key.1)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct DecreaseLiquidityV2MigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for DecreaseLiquidityV2MigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS decrease_liquidity_v2_instruction (
                        -- Instruction data
                                    "liquidity" NUMERIC(39) NOT NULL,
                        "amount0_min" NUMERIC(20) NOT NULL,
                        "amount1_min" NUMERIC(20) NOT NULL,
            
                        -- Instruction metadata
            __signature TEXT NOT NULL,
            __index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot BIGINT,
            
                        PRIMARY KEY (__signature, __index)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS decrease_liquidity_v2_instruction"#).execute(connection).await?;
        Ok(())
    }
}

