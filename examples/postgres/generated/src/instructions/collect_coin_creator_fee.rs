//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct CollectCoinCreatorFee {
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectCoinCreatorFeeInstructionAccounts {
    pub quote_mint: solana_pubkey::Pubkey,
    pub quote_token_program: solana_pubkey::Pubkey,
    pub coin_creator: solana_pubkey::Pubkey,
    pub coin_creator_vault_authority: solana_pubkey::Pubkey,
    pub coin_creator_vault_ata: solana_pubkey::Pubkey,
    pub coin_creator_token_account: solana_pubkey::Pubkey,
    pub event_authority: solana_pubkey::Pubkey,
    pub program: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl CollectCoinCreatorFee {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[160, 57, 89, 42, 181, 139, 43, 66] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for CollectCoinCreatorFee {
    type ArrangedAccounts = CollectCoinCreatorFeeInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let quote_mint = next_account(&mut iter)?;
                let quote_token_program = next_account(&mut iter)?;
                let coin_creator = next_account(&mut iter)?;
                let coin_creator_vault_authority = next_account(&mut iter)?;
                let coin_creator_vault_ata = next_account(&mut iter)?;
                let coin_creator_token_account = next_account(&mut iter)?;
                let event_authority = next_account(&mut iter)?;
                let program = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(CollectCoinCreatorFeeInstructionAccounts {
                        quote_mint: quote_mint,
                        quote_token_program: quote_token_program,
                        coin_creator: coin_creator,
                        coin_creator_vault_authority: coin_creator_vault_authority,
                        coin_creator_vault_ata: coin_creator_vault_ata,
                        coin_creator_token_account: coin_creator_token_account,
                        event_authority: event_authority,
                        program: program,
                        remaining: remaining.to_vec(),
        })
            }
}

