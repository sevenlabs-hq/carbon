//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct DecreaseLiquidityV2 {
        pub liquidity: u128,
        pub amount0_min: u64,
        pub amount1_min: u64,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DecreaseLiquidityV2InstructionAccounts {
    pub nft_owner: solana_pubkey::Pubkey,
    pub nft_account: solana_pubkey::Pubkey,
    pub personal_position: solana_pubkey::Pubkey,
    pub pool_state: solana_pubkey::Pubkey,
    pub protocol_position: solana_pubkey::Pubkey,
    pub token_vault0: solana_pubkey::Pubkey,
    pub token_vault1: solana_pubkey::Pubkey,
    pub tick_array_lower: solana_pubkey::Pubkey,
    pub tick_array_upper: solana_pubkey::Pubkey,
    pub recipient_token_account0: solana_pubkey::Pubkey,
    pub recipient_token_account1: solana_pubkey::Pubkey,
    pub token_program: solana_pubkey::Pubkey,
    pub token_program2022: solana_pubkey::Pubkey,
    pub memo_program: solana_pubkey::Pubkey,
    pub vault0_mint: solana_pubkey::Pubkey,
    pub vault1_mint: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl DecreaseLiquidityV2 {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[58, 127, 188, 62, 79, 82, 196, 96] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for DecreaseLiquidityV2 {
    type ArrangedAccounts = DecreaseLiquidityV2InstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let nft_owner = next_account(&mut iter)?;
                let nft_account = next_account(&mut iter)?;
                let personal_position = next_account(&mut iter)?;
                let pool_state = next_account(&mut iter)?;
                let protocol_position = next_account(&mut iter)?;
                let token_vault0 = next_account(&mut iter)?;
                let token_vault1 = next_account(&mut iter)?;
                let tick_array_lower = next_account(&mut iter)?;
                let tick_array_upper = next_account(&mut iter)?;
                let recipient_token_account0 = next_account(&mut iter)?;
                let recipient_token_account1 = next_account(&mut iter)?;
                let token_program = next_account(&mut iter)?;
                let token_program2022 = next_account(&mut iter)?;
                let memo_program = next_account(&mut iter)?;
                let vault0_mint = next_account(&mut iter)?;
                let vault1_mint = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(DecreaseLiquidityV2InstructionAccounts {
                        nft_owner: nft_owner,
                        nft_account: nft_account,
                        personal_position: personal_position,
                        pool_state: pool_state,
                        protocol_position: protocol_position,
                        token_vault0: token_vault0,
                        token_vault1: token_vault1,
                        tick_array_lower: tick_array_lower,
                        tick_array_upper: tick_array_upper,
                        recipient_token_account0: recipient_token_account0,
                        recipient_token_account1: recipient_token_account1,
                        token_program: token_program,
                        token_program2022: token_program2022,
                        memo_program: memo_program,
                        vault0_mint: vault0_mint,
                        vault1_mint: vault1_mint,
                        remaining: remaining.to_vec(),
        })
            }
}

