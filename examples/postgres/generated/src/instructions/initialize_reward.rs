//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct InitializeReward {
        pub open_time: u64,
        pub end_time: u64,
        pub emissions_per_second_x64: u128,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeRewardInstructionAccounts {
    pub reward_funder: solana_pubkey::Pubkey,
    pub funder_token_account: solana_pubkey::Pubkey,
    pub amm_config: solana_pubkey::Pubkey,
    pub pool_state: solana_pubkey::Pubkey,
    pub operation_state: solana_pubkey::Pubkey,
    pub reward_token_mint: solana_pubkey::Pubkey,
    pub reward_token_vault: solana_pubkey::Pubkey,
    pub reward_token_program: solana_pubkey::Pubkey,
    pub system_program: solana_pubkey::Pubkey,
    pub rent: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl InitializeReward {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[95, 135, 192, 196, 242, 129, 230, 68] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for InitializeReward {
    type ArrangedAccounts = InitializeRewardInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
                let mut iter = accounts.iter();

                let reward_funder = next_account(&mut iter)?;
                let funder_token_account = next_account(&mut iter)?;
                let amm_config = next_account(&mut iter)?;
                let pool_state = next_account(&mut iter)?;
                let operation_state = next_account(&mut iter)?;
                let reward_token_mint = next_account(&mut iter)?;
                let reward_token_vault = next_account(&mut iter)?;
                let reward_token_program = next_account(&mut iter)?;
                let system_program = next_account(&mut iter)?;
                let rent = next_account(&mut iter)?;
        
        let remaining = iter.as_slice();

        Some(InitializeRewardInstructionAccounts {
                        reward_funder: reward_funder,
                        funder_token_account: funder_token_account,
                        amm_config: amm_config,
                        pool_state: pool_state,
                        operation_state: operation_state,
                        reward_token_mint: reward_token_mint,
                        reward_token_vault: reward_token_vault,
                        reward_token_program: reward_token_program,
                        system_program: system_program,
                        rent: rent,
                        remaining: remaining.to_vec(),
        })
            }
}

