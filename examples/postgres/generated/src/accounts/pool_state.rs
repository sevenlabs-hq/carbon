//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::borsh::{self, BorshDeserialize};
use crate::types::RewardInfo;
use solana_pubkey::Pubkey;


#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct PoolState {
pub bump: Vec<u8>,
pub amm_config: Pubkey,
pub owner: Pubkey,
pub token_mint0: Pubkey,
pub token_mint1: Pubkey,
pub token_vault0: Pubkey,
pub token_vault1: Pubkey,
pub observation_key: Pubkey,
pub mint_decimals0: u8,
pub mint_decimals1: u8,
pub tick_spacing: u16,
pub liquidity: u128,
pub sqrt_price_x64: u128,
pub tick_current: i32,
pub padding3: u16,
pub padding4: u16,
pub fee_growth_global0_x64: u128,
pub fee_growth_global1_x64: u128,
pub protocol_fees_token0: u64,
pub protocol_fees_token1: u64,
pub swap_in_amount_token0: u128,
pub swap_out_amount_token1: u128,
pub swap_in_amount_token1: u128,
pub swap_out_amount_token0: u128,
pub status: u8,
pub padding: Vec<u8>,
pub reward_infos: [RewardInfo; 3],
pub tick_array_bitmap: [u64; 16],
pub total_fees_token0: u64,
pub total_fees_claimed_token0: u64,
pub total_fees_token1: u64,
pub total_fees_claimed_token1: u64,
pub fund_fees_token0: u64,
pub fund_fees_token1: u64,
pub open_time: u64,
pub recent_epoch: u64,
pub padding1: [u64; 24],
pub padding2: [u64; 32],
}

impl PoolState {
    pub fn decode(data: &[u8]) -> Option<Self> {
                
                if data.len() < 8 {
                    return None;
                }
                let discriminator = &data[0..8];
                if discriminator != &[247, 237, 227, 245, 215, 195, 222, 70] {
                    return None;
                }
            
        
        let mut data_slice = data;

                data_slice = &data_slice[8..];
        
        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

