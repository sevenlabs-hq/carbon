//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{PROGRAM_ID, PumpAmmDecoder};

#[cfg(feature = "postgres")]
pub mod postgres;

pub mod bonding_curve;
pub mod fee_config;
pub mod global_config;
pub mod global_volume_accumulator;
pub mod pool;
pub mod user_volume_accumulator;

pub use self::bonding_curve::*;
pub use self::fee_config::*;
pub use self::global_config::*;
pub use self::global_volume_accumulator::*;
pub use self::pool::*;
pub use self::user_volume_accumulator::*;

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "serde", serde(tag = "type", content = "data"))]
pub enum PumpAmmAccount {
    BondingCurve(BondingCurve),
    FeeConfig(FeeConfig),
    GlobalConfig(GlobalConfig),
    GlobalVolumeAccumulator(GlobalVolumeAccumulator),
    Pool(Pool),
    UserVolumeAccumulator(UserVolumeAccumulator),
}

impl<'a> carbon_core::account::AccountDecoder<'a> for PumpAmmDecoder {
    type AccountType = PumpAmmAccount;
    
    fn decode_account(
        &self,
        account: &'a solana_account::Account,
    ) -> Option<carbon_core::account::DecodedAccount<Self::AccountType>> {
        if account.owner != PROGRAM_ID {
            return None;
        }
        
        let data = account.data.as_slice();
        
                // Try to decode BondingCurve
        {
            if let Some(decoded) = bonding_curve::BondingCurve::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: PumpAmmAccount::BondingCurve(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode FeeConfig
        {
            if let Some(decoded) = fee_config::FeeConfig::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: PumpAmmAccount::FeeConfig(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode GlobalConfig
        {
            if let Some(decoded) = global_config::GlobalConfig::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: PumpAmmAccount::GlobalConfig(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode GlobalVolumeAccumulator
        {
            if let Some(decoded) = global_volume_accumulator::GlobalVolumeAccumulator::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: PumpAmmAccount::GlobalVolumeAccumulator(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode Pool
        {
            if let Some(decoded) = pool::Pool::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: PumpAmmAccount::Pool(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                // Try to decode UserVolumeAccumulator
        {
            if let Some(decoded) = user_volume_accumulator::UserVolumeAccumulator::decode(data) {
                return Some(carbon_core::account::DecodedAccount {
                    lamports: account.lamports,
                    data: PumpAmmAccount::UserVolumeAccumulator(decoded),
                    owner: account.owner,
                    executable: account.executable,
                    rent_epoch: account.rent_epoch,
                });
            }
        }
                
        None
    }
}

