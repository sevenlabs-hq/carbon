//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use carbon_core::account::AccountMetadata;
use carbon_core::postgres::metadata::AccountRowMetadata;
use carbon_core::postgres::primitives::Pubkey;
use carbon_core::postgres::primitives::U8;
use crate::accounts::OperationState;


#[derive(sqlx::FromRow, Debug, Clone)]
pub struct OperationStateRow {
    #[sqlx(flatten)]
        pub metadata: AccountRowMetadata,
            pub bump: U8,
        pub operation_owners: Vec<Pubkey>,
        pub whitelist_mints: Vec<Pubkey>,
}

impl OperationStateRow {
    pub fn from_parts(source: OperationState, metadata: AccountMetadata) -> Self {
        Self {
            metadata: metadata.into(),
                        bump: source.bump.into(),
                        operation_owners: source.operation_owners.into_iter().map(|element| element.into()).collect(),
                        whitelist_mints: source.whitelist_mints.into_iter().map(|element| element.into()).collect(),
                    }
    }
}

impl TryFrom<OperationStateRow> for OperationState {
    type Error = carbon_core::error::Error;
    fn try_from(source: OperationStateRow) -> Result<Self, Self::Error> {
        Ok(Self {
                        bump: source.bump.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert value from postgres primitive".to_string()))?,
                        operation_owners: source.operation_owners.into_iter().map(|element| Ok(*element)).collect::<Result<Vec<_>, _>>()?.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert array element to primitive".to_string()))?,
                        whitelist_mints: source.whitelist_mints.into_iter().map(|element| Ok(*element)).collect::<Result<Vec<_>, _>>()?.try_into().map_err(|_| carbon_core::error::Error::Custom("Failed to convert array element to primitive".to_string()))?,
                    })
    }
}

impl carbon_core::postgres::operations::Table for OperationState {
    fn table() -> &'static str {
        "operation_state_account"
    }

    fn columns() -> Vec<&'static str> {
        vec![
                        "__pubkey",
            "__slot",
                                    "bump",
                        "operation_owners",
                        "whitelist_mints",
                    ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for OperationStateRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO operation_state_account (
                            "bump",
                            "operation_owners",
                            "whitelist_mints",
                                        __pubkey, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5                    )"#)
                .bind(self.bump.clone())
                .bind(self.operation_owners.clone())
                .bind(self.whitelist_mints.clone())
                        .bind(self.metadata.pubkey.clone())
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for OperationStateRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO operation_state_account (
                        "bump",
                        "operation_owners",
                        "whitelist_mints",
                                    __pubkey, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5                    ) ON CONFLICT (
                        __pubkey
                    ) DO UPDATE SET
                        "bump" = EXCLUDED."bump",
                        "operation_owners" = EXCLUDED."operation_owners",
                        "whitelist_mints" = EXCLUDED."whitelist_mints",
                                    __slot = EXCLUDED.__slot
                    "#)
                .bind(self.bump.clone())
                .bind(self.operation_owners.clone())
                .bind(self.whitelist_mints.clone())
                        .bind(self.metadata.pubkey)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for OperationStateRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"DELETE FROM operation_state_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for OperationStateRow {
    type Key = carbon_core::postgres::primitives::Pubkey;

    async fn lookup(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(r#"SELECT * FROM operation_state_account WHERE
                        __pubkey = $1
                    "#)
                .bind(key)
                .fetch_optional(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))
        ?;

        Ok(row)
    }
}

pub struct OperationStateMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for OperationStateMigrationOperation {
    async fn up(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"CREATE TABLE IF NOT EXISTS operation_state_account (
                        -- Account data
                                    "bump" SMALLINT NOT NULL,
                        "operation_owners" BYTEA[] NOT NULL,
                        "whitelist_mints" BYTEA[] NOT NULL,
            
                        -- Account metadata
            __pubkey BYTEA NOT NULL,
            __slot BIGINT,
            
                        PRIMARY KEY (__pubkey)
                    )"#).execute(connection).await?;
        Ok(())
    }

    async fn down(&self, connection: &mut sqlx::PgConnection) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS operation_state_account"#).execute(connection).await?;
        Ok(())
    }
}

