{% for instruction in instructionsToExport %}
{% if instruction.arguments.length > 1 %}
pub mod {{ instruction.name | snakeCase }}_schema;
{% endif %}
{% endfor %}
{% if hasAnchorEvents %}
pub mod cpi_event_schema;
{% endif %}

{% for instruction in instructionsToExport %}
{% if instruction.arguments.length > 1 %}
pub use {{ instruction.name | snakeCase }}_schema::*;
{% endif %}
{% endfor %}
{% if hasAnchorEvents %}
pub use cpi_event_schema::*;
{% endif %}

use juniper::GraphQLObject;

#[derive(Debug, Clone, GraphQLObject)]
#[graphql(name = "InstructionMetadata")]
pub struct InstructionMetadataGraphQL {
    pub signature: String,
    pub instruction_index: carbon_core::graphql::primitives::U32,
    pub stack_height: carbon_core::graphql::primitives::U32,
    pub slot: Option<carbon_core::graphql::primitives::U64>,
}

impl From<carbon_core::postgres::metadata::InstructionRowMetadata> for InstructionMetadataGraphQL {
    fn from(metadata: carbon_core::postgres::metadata::InstructionRowMetadata) -> Self {
        Self {
            signature: metadata.signature,
            instruction_index: carbon_core::graphql::primitives::U32((*metadata.instruction_index) as u32),
            stack_height: carbon_core::graphql::primitives::U32((*metadata.stack_height) as u32),
            slot: metadata
                .slot
                .map(|v| carbon_core::graphql::primitives::U64(*v)),
        }
    }
}