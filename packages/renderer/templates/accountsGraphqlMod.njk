{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{% for account in accountsToExport %}
{% if account.data.kind == 'structTypeNode' and account.data.fields.length > 0 %}
pub mod {{ macros.escapeRustKeyword(account.name | snakeCase) }}_schema;
{% endif %}
{% endfor %}

{% for account in accountsToExport %}
{% if account.data.kind == 'structTypeNode' and account.data.fields.length > 0 %}
pub use {{ macros.escapeRustKeyword(account.name | snakeCase) }}_schema::*;
{% endif %}
{% endfor %}

{{ imports }}

#[derive(Debug, Clone, GraphQLObject)]
#[graphql(name = "AccountMetadata")]
pub struct AccountMetadataGraphQL {
    pub pubkey: carbon_core::graphql::primitives::Pubkey,
    pub slot: Option<carbon_core::graphql::primitives::U64>,
}

impl From<carbon_core::postgres::metadata::AccountRowMetadata> for AccountMetadataGraphQL {
    fn from(metadata: carbon_core::postgres::metadata::AccountRowMetadata) -> Self {
        Self {
            pubkey: carbon_core::graphql::primitives::Pubkey(*metadata.pubkey),
            slot: metadata
                .slot
                .map(|v| carbon_core::graphql::primitives::U64(*v)),
        }
    }
}

{% endblock %}