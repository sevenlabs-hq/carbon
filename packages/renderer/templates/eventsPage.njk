{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}

{{ imports }}

#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub struct {{ event.name | pascalCase }}Event {{ typeManifest.type }}

impl {{ event.name | pascalCase }}Event {
    pub fn decode(data: &[u8]) -> Option<Self> {
        {% if discriminatorManifest %}
        {{ discriminatorManifest.checkCode | safe }}
        {% endif %}

        let mut data_slice = data;

        {% if discriminatorManifest %}
        data_slice = &data_slice[{{ discriminatorManifest.size }}..];
        {% endif %}

        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

{% endblock %}
