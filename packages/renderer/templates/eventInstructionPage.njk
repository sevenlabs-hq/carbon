{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}

{{ imports }}
pub use super::super::events;

#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, carbon_core::borsh::BorshSerialize, carbon_core::borsh::BorshDeserialize, PartialEq)]
pub enum CpiEvent {
{% for event in events %}
    {{ event.name | pascalCase }}(events::{{ event.name | snakeCase }}::{{event.name | pascalCase }}Event),
{% endfor %}
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CpiEventInstructionAccounts {
    pub program: solana_pubkey::Pubkey,
    pub event_authority: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl CpiEvent {
    pub fn decode(data: &[u8]) -> Option<Self> {
        if data.len() < 8 {
            return None;
        }
        let discriminator = &data[0..8];
        if discriminator != &[228, 69, 165, 46, 81, 203, 154, 29] {
            return None;
        }

        let event_data = &data[8..];

        {% for event in events %}
        if let Some(decoded) = events::{{ event.name | snakeCase }}::{{ event.name | pascalCase }}Event::decode(event_data) {
            return Some(CpiEvent::{{ event.name | pascalCase }}(decoded));
        }
        {% endfor %}
        None
    }
}

impl ArrangeAccounts for CpiEvent {
    type ArrangedAccounts = CpiEventInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
        let [program, event_authority, remaining @ ..] = accounts else {
            return None;
        };

        Some(CpiEventInstructionAccounts {
            program: program.pubkey,
            event_authority: event_authority.pubkey,
            remaining: remaining.to_vec(),
        })
    }
}

{% endblock %}