{{ imports }}

#[tokio::main]
pub async fn main() -> CarbonResult<()> {
    env_logger::init();
    dotenv::dotenv().ok();

    {%- if data_source.module_name == "yellowstone_grpc" or data_source.module_name == "helius_laserstream" %}
    // NOTE: Workaround, that solving issue https://github.com/rustls/rustls/issues/1877
    rustls::crypto::aws_lc_rs::default_provider()
        .install_default()
        .expect("Can't set crypto provider to aws_lc_rs");
    {%- endif %}

    {%- if withPostgres %}
    // Database setup and migrations
    let db_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");
    let pool = sqlx::Pool::<sqlx::Postgres>::connect(&db_url)
        .await
        .unwrap();
    
    let mut migrator = sqlx_migrator::Migrator::default();
    let mut conn = pool.acquire().await.unwrap();

    // Migrations
    {%- if useGenericPostgres %}
    migrator
        .add_migration(Box::new(GenericAccountsMigration))
        .unwrap();
    migrator
        .add_migration(Box::new(GenericInstructionMigration))
        .unwrap();
    {%- else %}
    {%- for decoder in decoders %}
    migrator
        .add_migration(Box::new({{ decoder.name }}AccountsMigration))
        .unwrap();
    migrator
        .add_migration(Box::new({{ decoder.name }}InstructionsMigration))
        .unwrap();
    {%- endfor %}
    {%- endif %}
    
    migrator.run(&mut *conn, &Plan::apply_all()).await.unwrap();
    {%- endif %}

    let datasource = {{ datasource_init | safe }};

    let mut pipeline = carbon_core::pipeline::Pipeline::builder()
        .datasource(datasource)
        .metrics(Arc::new({{ metrics.name }}Metrics::new()))
        .metrics_flush_interval(5)
        {%- if withPostgres %}
        {%- if useGenericPostgres %}
        {%- for decoder in decoders %}
        .account(
            {{ decoder.name }}Decoder,
            PostgresJsonAccountProcessor::<{{ decoder.name }}Account>::new(pool.clone()),
        )
        .instruction(
            {{ decoder.name }}Decoder,
            PostgresJsonInstructionProcessor::<{{ decoder.name }}Instruction>::new(pool.clone()),
        )
        {%- endfor %}
        {%- else %}
        {%- for decoder in decoders %}
        .account(
            {{ decoder.name }}Decoder,
            PostgresAccountProcessor::<{{ decoder.name }}Account, {{ decoder.name }}AccountWithMetadata>::new(pool.clone()),
        )
        .instruction(
            {{ decoder.name }}Decoder,
            PostgresInstructionProcessor::<{{ decoder.name }}Instruction, {{ decoder.name }}InstructionWithMetadata>::new(pool.clone()),
        )
        {%- endfor %}
        {%- endif %}
        {%- else %}
        {%- for decoder in decoders %}
        .instruction({{ decoder.name }}Decoder, {{ decoder.name }}InstructionProcessor)
        {%- endfor %}
        {%- endif %}
        .shutdown_strategy(carbon_core::pipeline::ShutdownStrategy::Immediate)
        .build()?;

    {%- if withGraphQL %}
    tokio::select! {
        res = run_graphql(Arc::new(pool.clone())) => {
            res?;
        }
        res = pipeline.run() => {
            res?;
        }
    }
    {%- else %}
    pipeline.run().await?;
    {%- endif %}

    Ok(())
}

{%- if withGraphQL %}
async fn run_graphql(pool: Arc<sqlx::PgPool>) -> CarbonResult<()> {
    {%- for decoder in decoders %}
    let schema = carbon_core::graphql::server::build_schema(QueryRoot);
    let ctx = GraphQLContext { pool: pool.clone() };
    let app = carbon_core::graphql::server::graphql_router::<QueryRoot, GraphQLContext>(schema, ctx);
    {%- endfor %}

    let addr: SocketAddr = "0.0.0.0:8080".parse().unwrap();
    println!("GraphQL: http://{addr}/graphql");
    println!("GraphiQL: http://{addr}/graphiql");
    axum::serve(tokio::net::TcpListener::bind(addr).await.unwrap(), app)
        .await
        .unwrap();
    Ok(())
}
{%- endif %}

{%- if not withPostgres %}
{%- for decoder in decoders %} 
pub struct {{ decoder.name }}InstructionProcessor;

#[async_trait]
impl Processor for {{ decoder.name }}InstructionProcessor {
    type InputType = (
        InstructionMetadata,
        DecodedInstruction<{{ decoder.name }}Instruction>,
        NestedInstructions,
        solana_instruction::Instruction,
    );

    async fn process(
        &mut self,
        (metadata, instruction, _nested_instructions, _raw_instruction): Self::InputType,
        _metrics: Arc<MetricsCollection>,
    ) -> CarbonResult<()> {
        let signature = metadata.transaction_metadata.signature;
        let accounts = instruction.accounts;

        log::info!("received the {{ decoder.name }} instruction, sig: {}, accounts len: {}", signature, accounts.len());
        
        match instruction.data {
            _ => {}
        };

        Ok(())
    }
}
{%- endfor %}
{%- endif %}