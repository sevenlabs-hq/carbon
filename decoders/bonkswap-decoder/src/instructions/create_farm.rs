//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::types::Token;
use carbon_core::account_utils::next_account;
use carbon_core::borsh::{self, BorshDeserialize};
use carbon_core::deserialize::ArrangeAccounts;

#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(
    Debug,
    Clone,
    carbon_core::borsh::BorshSerialize,
    carbon_core::borsh::BorshDeserialize,
    PartialEq,
)]
pub struct CreateFarm {
    pub supply: Token,
    pub duration: u64,
    pub bump: u8,
}

#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateFarmInstructionAccounts {
    pub state: solana_pubkey::Pubkey,
    pub pool: solana_pubkey::Pubkey,
    pub farm: solana_pubkey::Pubkey,
    pub token_x: solana_pubkey::Pubkey,
    pub token_y: solana_pubkey::Pubkey,
    pub token_marco: solana_pubkey::Pubkey,
    pub token_marco_account: solana_pubkey::Pubkey,
    pub admin_marco_account: solana_pubkey::Pubkey,
    pub admin: solana_pubkey::Pubkey,
    pub program_authority: solana_pubkey::Pubkey,
    pub system_program: solana_pubkey::Pubkey,
    pub token_program: solana_pubkey::Pubkey,
    pub rent: solana_pubkey::Pubkey,
    pub remaining: Vec<solana_instruction::AccountMeta>,
}

impl CreateFarm {
    pub fn decode(data: &[u8]) -> Option<Self> {
        if data.len() < 8 {
            return None;
        }
        let discriminator = &data[0..8];
        if discriminator != [74, 59, 128, 160, 87, 174, 153, 194] {
            return None;
        }

        let mut data_slice = data;

        data_slice = &data_slice[8..];

        if let Ok(decoded) = Self::deserialize(&mut data_slice) {
            return Some(decoded);
        }

        None
    }
}

impl ArrangeAccounts for CreateFarm {
    type ArrangedAccounts = CreateFarmInstructionAccounts;

    fn arrange_accounts(
        accounts: &[solana_instruction::AccountMeta],
    ) -> Option<Self::ArrangedAccounts> {
        let mut iter = accounts.iter();

        let state = next_account(&mut iter)?;
        let pool = next_account(&mut iter)?;
        let farm = next_account(&mut iter)?;
        let token_x = next_account(&mut iter)?;
        let token_y = next_account(&mut iter)?;
        let token_marco = next_account(&mut iter)?;
        let token_marco_account = next_account(&mut iter)?;
        let admin_marco_account = next_account(&mut iter)?;
        let admin = next_account(&mut iter)?;
        let program_authority = next_account(&mut iter)?;
        let system_program = next_account(&mut iter)?;
        let token_program = next_account(&mut iter)?;
        let rent = next_account(&mut iter)?;

        let remaining = iter.as_slice();

        Some(CreateFarmInstructionAccounts {
            state,
            pool,
            farm,
            token_x,
            token_y,
            token_marco,
            token_marco_account,
            admin_marco_account,
            admin,
            program_authority,
            system_program,
            token_program,
            rent,
            remaining: remaining.to_vec(),
        })
    }
}
