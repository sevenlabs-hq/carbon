//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::instructions::Swap;
use crate::types::FixedPoint;
use crate::types::Token;
use carbon_core::instruction::InstructionMetadata;
use carbon_core::postgres::metadata::InstructionRowMetadata;

#[derive(sqlx::FromRow, Debug, Clone)]
pub struct SwapRow {
    #[sqlx(flatten)]
    pub metadata: InstructionRowMetadata,
    pub delta_in: sqlx::types::Json<Token>,
    pub price_limit: sqlx::types::Json<FixedPoint>,
    pub x_to_y: bool,
}

impl SwapRow {
    pub fn from_parts(source: Swap, metadata: InstructionMetadata) -> Self {
        Self {
            metadata: metadata.into(),
            delta_in: sqlx::types::Json(source.delta_in),
            price_limit: sqlx::types::Json(source.price_limit),
            x_to_y: source.x_to_y,
        }
    }
}

impl TryFrom<SwapRow> for Swap {
    type Error = carbon_core::error::Error;
    fn try_from(source: SwapRow) -> Result<Self, Self::Error> {
        Ok(Self {
            delta_in: source.delta_in.0,
            price_limit: source.price_limit.0,
            x_to_y: source.x_to_y,
        })
    }
}

impl carbon_core::postgres::operations::Table for Swap {
    fn table() -> &'static str {
        "swap_instruction"
    }

    fn columns() -> Vec<&'static str> {
        vec![
            "__signature",
            "__instruction_index",
            "__stack_height",
            "__slot",
            "delta_in",
            "price_limit",
            "x_to_y",
        ]
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Insert for SwapRow {
    async fn insert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"
            INSERT INTO swap_instruction (
                            "delta_in",
                            "price_limit",
                            "x_to_y",
                                        __signature, __instruction_index, __stack_height, __slot
                        ) VALUES (
                                                                            $1,                            $2,                            $3,                            $4,                            $5,                            $6,                            $7                    )"#)
                .bind(self.delta_in.clone())
                .bind(self.price_limit.clone())
                .bind(self.x_to_y)
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index)
        .bind(self.metadata.stack_height)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;
        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Upsert for SwapRow {
    async fn upsert(&self, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(r#"INSERT INTO swap_instruction (
                        "delta_in",
                        "price_limit",
                        "x_to_y",
                                    __signature, __instruction_index, __stack_height, __slot
                    ) VALUES (
                                                                        $1,                        $2,                        $3,                        $4,                        $5,                        $6,                        $7                    ) ON CONFLICT (
                        __signature, __instruction_index
                    ) DO UPDATE SET
                        "delta_in" = EXCLUDED."delta_in",
                        "price_limit" = EXCLUDED."price_limit",
                        "x_to_y" = EXCLUDED."x_to_y",
                                    __instruction_index = EXCLUDED.__instruction_index,
            __stack_height = EXCLUDED.__stack_height,
            __slot = EXCLUDED.__slot
                    "#)
                .bind(self.delta_in.clone())
                .bind(self.price_limit.clone())
                .bind(self.x_to_y)
                        .bind(self.metadata.signature.clone())
        .bind(self.metadata.instruction_index)
        .bind(self.metadata.stack_height)
        .bind(self.metadata.slot.clone())
                .execute(pool).await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::Delete for SwapRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn delete(key: Self::Key, pool: &sqlx::PgPool) -> carbon_core::error::CarbonResult<()> {
        sqlx::query(
            r#"DELETE FROM swap_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#,
        )
        .bind(key.0)
        .bind(key.1)
        .execute(pool)
        .await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(())
    }
}

#[async_trait::async_trait]
impl carbon_core::postgres::operations::LookUp for SwapRow {
    type Key = (String, carbon_core::postgres::primitives::U32);

    async fn lookup(
        key: Self::Key,
        pool: &sqlx::PgPool,
    ) -> carbon_core::error::CarbonResult<Option<Self>> {
        let row = sqlx::query_as(
            r#"SELECT * FROM swap_instruction WHERE
                        __signature = $1 AND __instruction_index = $2
                    "#,
        )
        .bind(key.0)
        .bind(key.1)
        .fetch_optional(pool)
        .await
        .map_err(|e| carbon_core::error::Error::Custom(e.to_string()))?;

        Ok(row)
    }
}

pub struct SwapMigrationOperation;

#[async_trait::async_trait]
impl sqlx_migrator::Operation<sqlx::Postgres> for SwapMigrationOperation {
    async fn up(
        &self,
        connection: &mut sqlx::PgConnection,
    ) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(
            r#"CREATE TABLE IF NOT EXISTS swap_instruction (
                        -- Instruction data
                                    "delta_in" JSONB NOT NULL,
                        "price_limit" JSONB NOT NULL,
                        "x_to_y" BOOLEAN NOT NULL,
            
                        -- Instruction metadata
            __signature TEXT NOT NULL,
            __instruction_index BIGINT NOT NULL,
            __stack_height BIGINT NOT NULL,
            __slot NUMERIC(20),
            
                        PRIMARY KEY (__signature, __instruction_index)
                    )"#,
        )
        .execute(connection)
        .await?;
        Ok(())
    }

    async fn down(
        &self,
        connection: &mut sqlx::PgConnection,
    ) -> Result<(), sqlx_migrator::error::Error> {
        sqlx::query(r#"DROP TABLE IF EXISTS swap_instruction"#)
            .execute(connection)
            .await?;
        Ok(())
    }
}
